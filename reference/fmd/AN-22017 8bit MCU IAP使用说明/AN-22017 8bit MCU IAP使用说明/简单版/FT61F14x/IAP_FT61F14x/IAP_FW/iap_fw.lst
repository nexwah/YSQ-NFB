

GNU Macro Assembler for 8 bit devices.       
                                                                                               Tue Nov 16 11:48:35 2021

GNU C Code Generator                                                 
     1                           	processor	FT61F14X
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	pa_nodes0,global,class=CODE,delta=2
    14                           	dabs	1,0x24,1,_CRC_H
    15                           	dabs	1,0x23,1,_CRC_L
    16                           	dabs	1,0x103,0,_uart_rxnef
    17                           	dabs	1,0x20,1
    18                           	dabs	1,0x102,0,_iap_ok_flag
    19                           	dabs	1,0x20,1
    20                           	dabs	1,0x101,0,_iap_err_flag
    21                           	dabs	1,0x20,1
    22                           	dabs	1,0x100,0,_read_flag
    23                           	dabs	1,0x20,1
    24                           	dabs	1,0x71,1,_BSR_TMP
    25                           	dabs	1,0x70,1,_W_TMP
    26                           	dabs	1,0x23,2,_CRC_16
    27                           	dabs	1,0x22,1,_iap_recdata
    28                           	dabs	1,0x21,1,_count
    29                           	dabs	1,0x20,1,_flag
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 
    34                           ; 
    35                           ; SFR Addresses
    36  0000                     
    37                           	psect	text0
    38  0000                     __ptext0:		;_read_flag
    39  000B                     _INTCON	set	11
    40  0008                     _BSREG	set	8
    41  009A                     _PCKEN	set	154
    42  0099                     _OSCCON	set	153
    43  008D                     _TRISB	set	141
    44  019F                     _AFP1	set	415
    45  0195                     _EECON1	set	405
    46  0194                     _EEDATH	set	404
    47  0193                     _EEDATL	set	403
    48  0192                     _EEADRH	set	402
    49  0191                     _EEADRL	set	401
    50  0CAF                     _EEPGD	set	3247
    51  0CAE                     _CFGS	set	3246
    52  0CA8                     _RD	set	3240
    53  0494                     _URDLL	set	1172
    54  0492                     _URLSR	set	1170
    55  0491                     _URMCR	set	1169
    56  048F                     _URLCR	set	1167
    57  048C                     _URDATAL	set	1164
    58  24E0                     _TCF	set	9440
    59  2493                     _FEF	set	9363
    60  2490                     _RXNEF	set	9360
    61  2470                     _URRXNE	set	9328
    62                           
    63                           	psect	cinit
    64  0021                     start_initialization:	
    65                           ; #config settings
    66                           
    67  0021                     __initialization:	
    68                           
    69                           ; Clear objects allocated to BANK0
    70  0021  3025               	movlw	low __pbssBANK0
    71  0022  0084               	movwf	4
    72  0023  3000               	movlw	high __pbssBANK0
    73  0024  0085               	movwf	5
    74  0025  3045               	movlw	69
    75  0026  3181  21E6  3180   	fcall	clear_ram0
    76  0029                     end_of_initialization:	
    77                           ;End of C runtime variable initialization code
    78                           
    79  0029                     __end_of__initialization:	
    80  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
    81  002A  0020               	movlb	0
    82  002B  282C               	ljmp	_main	;jump to C main() function
    83  002C                     __pmaintext:	
    84                           ; 1 bytes @ 0x1
    85 ;;
    86 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    87 ;;
    88 ;; *************** function _main *****************
    89 ;; Defined at:
    90 ;;		line 248 in file "IAP_FW.C"
    91 ;; Parameters:    Size  Location     Type
    92 ;;		None
    93 ;; Auto vars:     Size  Location     Type
    94 ;;		None
    95 ;; Return value:  Size  Location     Type
    96 ;;                  1    wreg      void 
    97 ;; Registers used:
    98 ;;		wreg, status,2, status,0, pclath, cstack
    99 ;; Tracked objects:
   100 ;;		On entry : B1F/0
   101 ;;		On exit  : 0/0
   102 ;;		Unchanged: 0/0
   103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   104 ;;      Params:         0       0       0       0       0       0       0       0
   105 ;;      Locals:         0       0       0       0       0       0       0       0
   106 ;;      Temps:          0       0       0       0       0       0       0       0
   107 ;;      Totals:         0       0       0       0       0       0       0       0
   108 ;;Total ram usage:        0 bytes
   109 ;; Hardware stack levels required when called:    6
   110 ;; This function calls:
   111 ;;		_EEPROMread
   112 ;;		_iap_usart_init
   113 ;; This function is called by:
   114 ;;		Startup code after reset
   115 ;; This function uses a non-reentrant model
   116 ;;
   117                           
   118                           
   119                           ;psect for function _main
   120  002C                     _main:	
   121                           
   122                           ;IAP_FW.C: 250: iap_usart_init();
   123                           
   124                           ;incstack = 0
   125                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   126  002C  203A  3180         	fcall	_iap_usart_init
   127                           
   128                           ;IAP_FW.C: 251: count=0;
   129  002E  0020               	movlb	0	; select bank0
   130  002F  3000               	movlw	0
   131  0030  01A1               	clrf	33
   132                           
   133                           ;IAP_FW.C: 252: flag=0;
   134  0031  01A0               	clrf	32
   135                           
   136                           ;IAP_FW.C: 254: if(!EEPROMread(0))
   137  0032  204F               	fcall	_EEPROMread
   138  0033  3A00               	xorlw	0
   139  0034  1903               	btfsc	3,2
   140  0035  2A00               	goto	512	;# 
   141                           
   142                           ;IAP_FW.C: 257: }
   143                           ;IAP_FW.C: 258: read_flag =1;
   144  0036  0020               	movlb	0	; select bank0
   145  0037  1420               	bsf	32,0
   146  0038                     l1708:	
   147                           ;IAP_FW.C: 259: while(1)
   148                           
   149  0038  0064               	clrwdt	;# 
   150  0039  2838               	goto	l1708
   151  003A                     __end_of_main:	
   152  003A                     __ptext1:	
   153 ;; *************** function _iap_usart_init *****************
   154 ;; Defined at:
   155 ;;		line 4 in file "USART_DRV.C"
   156 ;; Parameters:    Size  Location     Type
   157 ;;		None
   158 ;; Auto vars:     Size  Location     Type
   159 ;;		None
   160 ;; Return value:  Size  Location     Type
   161 ;;                  1    wreg      void 
   162 ;; Registers used:
   163 ;;		wreg, status,2, status,0
   164 ;; Tracked objects:
   165 ;;		On entry : B1F/0
   166 ;;		On exit  : B1F/9
   167 ;;		Unchanged: B00/0
   168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   169 ;;      Params:         0       0       0       0       0       0       0       0
   170 ;;      Locals:         0       0       0       0       0       0       0       0
   171 ;;      Temps:          0       0       0       0       0       0       0       0
   172 ;;      Totals:         0       0       0       0       0       0       0       0
   173 ;;Total ram usage:        0 bytes
   174 ;; Hardware stack levels used:    1
   175 ;; Hardware stack levels required when called:    5
   176 ;; This function calls:
   177 ;;		Nothing
   178 ;; This function is called by:
   179 ;;		_main
   180 ;; This function uses a non-reentrant model
   181 ;;
   182                           
   183                           
   184                           ;psect for function _iap_usart_init
   185  003A                     _iap_usart_init:	
   186                           
   187                           ;USART_DRV.C: 7: PCKEN = (0X1<<5 );
   188                           
   189                           ;incstack = 0
   190                           ; Regs used in _iap_usart_init: [wreg+status,2+status,0]
   191  003A  3020               	movlw	32
   192  003B  0021               	movlb	1	; select bank1
   193  003C  009A               	movwf	26	;volatile
   194                           
   195                           ;USART_DRV.C: 8: OSCCON = 0B01110001;
   196  003D  3071               	movlw	113
   197  003E  0099               	movwf	25	;volatile
   198                           
   199                           ;USART_DRV.C: 12: AFP1 = 0B00010100;
   200  003F  3014               	movlw	20
   201  0040  0023               	movlb	3	; select bank3
   202  0041  009F               	movwf	31	;volatile
   203                           
   204                           ;USART_DRV.C: 14: TRISB &= ~(0X1<<6 );
   205  0042  0021               	movlb	1	; select bank1
   206  0043  130D               	bcf	13,6	;volatile
   207                           
   208                           ;USART_DRV.C: 19: URDLL=9;
   209  0044  3009               	movlw	9
   210  0045  0029               	movlb	9	; select bank9
   211  0046  0094               	movwf	20	;volatile
   212                           
   213                           ;USART_DRV.C: 22: URLCR=(0x1 );
   214  0047  3001               	movlw	1
   215  0048  008F               	movwf	15	;volatile
   216                           
   217                           ;USART_DRV.C: 24: URMCR=(0X1<<4 )|(0x1<<3 );
   218  0049  3018               	movlw	24
   219  004A  0091               	movwf	17	;volatile
   220                           
   221                           ;USART_DRV.C: 26: URRXNE |= (0X1<<0 );
   222  004B  140E               	bsf	14,0	;volatile
   223                           
   224                           ;USART_DRV.C: 28: INTCON |=(0x1<<6)|(0x1<<7);
   225  004C  30C0               	movlw	192
   226  004D  048B               	iorwf	11,f	;volatile
   227  004E  0008               	return
   228  004F                     __end_of_iap_usart_init:	
   229  004F                     __ptext2:	
   230 ;; *************** function _EEPROMread *****************
   231 ;; Defined at:
   232 ;;		line 46 in file "MEM_DRV.C"
   233 ;; Parameters:    Size  Location     Type
   234 ;;  EEAddr          1    wreg     unsigned char 
   235 ;; Auto vars:     Size  Location     Type
   236 ;;  EEAddr          1    0[BANK0 ] unsigned char 
   237 ;; Return value:  Size  Location     Type
   238 ;;                  1    wreg      unsigned char 
   239 ;; Registers used:
   240 ;;		wreg
   241 ;; Tracked objects:
   242 ;;		On entry : B1F/0
   243 ;;		On exit  : 1F/3
   244 ;;		Unchanged: 0/0
   245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   246 ;;      Params:         0       0       0       0       0       0       0       0
   247 ;;      Locals:         0       1       0       0       0       0       0       0
   248 ;;      Temps:          0       0       0       0       0       0       0       0
   249 ;;      Totals:         0       1       0       0       0       0       0       0
   250 ;;Total ram usage:        1 bytes
   251 ;; Hardware stack levels used:    1
   252 ;; Hardware stack levels required when called:    5
   253 ;; This function calls:
   254 ;;		Nothing
   255 ;; This function is called by:
   256 ;;		_main
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260                           
   261                           ;psect for function _EEPROMread
   262  004F                     _EEPROMread:	
   263                           
   264                           ;incstack = 0
   265                           ; Regs used in _EEPROMread: [wreg]
   266                           ;EEPROMread@EEAddr stored from wreg
   267  004F  00EA               	movwf	EEPROMread@EEAddr
   268                           
   269                           ;MEM_DRV.C: 49: EEADRL = EEAddr;
   270  0050  0023               	movlb	3	; select bank3
   271  0051  0091               	movwf	17	;volatile
   272                           
   273                           ;MEM_DRV.C: 51: EEPGD=0;
   274  0052  1395               	bcf	21,7	;volsfr
   275                           
   276                           ;MEM_DRV.C: 52: CFGS=0;
   277  0053  1315               	bcf	21,6	;volsfr
   278                           
   279                           ;MEM_DRV.C: 53: RD = 1;
   280  0054  1415               	bsf	21,0	;volsfr
   281                           
   282                           ;MEM_DRV.C: 54: __nop();
   283  0055  0000               	nop
   284                           
   285                           ;MEM_DRV.C: 55: __nop();
   286  0056  0000               	nop
   287                           
   288                           ;MEM_DRV.C: 56: __nop();
   289  0057  0000               	nop
   290                           
   291                           ;MEM_DRV.C: 57: __nop();
   292  0058  0000               	nop
   293                           
   294                           ;MEM_DRV.C: 58: __nop();
   295  0059  0000               	nop
   296                           
   297                           ;MEM_DRV.C: 59: RD=0;
   298  005A  0023               	movlb	3	; select bank3
   299  005B  1015               	bcf	21,0	;volsfr
   300                           
   301                           ;MEM_DRV.C: 60: return EEDATL;
   302  005C  0813               	movf	19,w	;volatile
   303  005D  0008               	return
   304  005E                     __end_of_EEPROMread:	
   305                           
   306                           	psect	bssBANK0
   307  0025                     __pbssBANK0:	
   308  0025                     _iap_databuf:	
   309  0025                     	ds	69
   310                           
   311                           	psect	clrtext
   312  01E6                     clear_ram0:	
   313                           ;	Called with FSR0 containing the base address, and
   314                           ;	WREG with the size to clear
   315                           
   316  01E6  0064               	clrwdt	;clear the watchdog before getting into this loop
   317  01E7                     clrloop0:	
   318  01E7  0180               	clrf	0	;clear RAM location pointed to by FSR
   319  01E8  3101               	addfsr 0,1
   320  01E9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   321  01EA  29E7               	goto	clrloop0	;have we reached the end yet?
   322  01EB  3400               	retlw	0	;all done for this memory range, return
   323                           
   324                           	psect	cstackCOMMON
   325  0072                     __pcstackCOMMON:	
   326  0072                     ?_iap_mem_prog:	
   327  0072                     ??_iap_mem_prog:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0072                     ?_user_isr:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0072                     ?_iap_usart_send:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0072                     ??_iap_usart_send:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0072                     ?_iap_usart_rec:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0072                     ?_iap_mem_erase:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0072                     ??_iap_mem_erase:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0072                     ?_iap_mem_rd:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0072                     ??_iap_mem_rd:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0072                     ?_iap_wait_tx_idle:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0072                     ??_iap_wait_tx_idle:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0072                     ?_iap_usart_init:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0072                     ?_EEPROMread:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0072                     ?_Eeprom_Write_Flag:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0072                     ??_Eeprom_Write_Flag:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0072                     ?_ISR:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0072                     ?_main:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0072                     ?_Unlock_Flash:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0072                     ??_Unlock_Flash:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0072                     ?_DelayUs:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0072                     ??_DelayUs:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0072                     Eeprom_Write_Flag@data:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0072                     DelayUs@a:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0072                     iap_usart_send@data:	
   397                           ; 1 bytes @ 0x0
   398                           
   399                           
   400                           ; 1 bytes @ 0x0
   401  0072                     	ds	1
   402  0073                     ??_iap_usart_rec:	
   403  0073                     iap_usart_rec@a:	
   404                           ; 1 bytes @ 0x1
   405                           
   406                           
   407                           ; 2 bytes @ 0x1
   408  0073                     	ds	2
   409  0075                     ??_user_isr:	
   410                           
   411                           ; 1 bytes @ 0x3
   412  0075                     	ds	4
   413  0079                     user_isr@j:	
   414                           
   415                           ; 1 bytes @ 0x7
   416  0079                     	ds	1
   417  007A                     user_isr@i:	
   418                           
   419                           ; 1 bytes @ 0x8
   420  007A                     	ds	1
   421  007B                     ??_ISR:	
   422                           
   423                           	psect	cstackBANK0
   424  006A                     __pcstackBANK0:	
   425                           ; 1 bytes @ 0x9
   426                           
   427  006A                     ??_iap_usart_init:	
   428  006A                     ??_EEPROMread:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  006A                     EEPROMread@EEAddr:	
   432                           ; 1 bytes @ 0x0
   433                           
   434                           
   435                           ; 1 bytes @ 0x0
   436  006A                     	ds	1
   437  006B                     ??_main:	
   438                           
   439                           	psect	intentry
   440  0004                     __pintentry:	
   441 ;; *************** function _ISR *****************
   442 ;; Defined at:
   443 ;;		line 48 in file "IAP_FW.C"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;		None
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   457 ;;      Params:         0       0       0       0       0       0       0       0
   458 ;;      Locals:         0       0       0       0       0       0       0       0
   459 ;;      Temps:          0       0       0       0       0       0       0       0
   460 ;;      Totals:         0       0       0       0       0       0       0       0
   461 ;;Total ram usage:        0 bytes
   462 ;; Hardware stack levels used:    1
   463 ;; Hardware stack levels required when called:    4
   464 ;; This function calls:
   465 ;;		_user_isr
   466 ;; This function is called by:
   467 ;;		Interrupt level 1
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471  0004                     _ISR:	
   472                           
   473                           ;incstack = 0
   474  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   475                           
   476                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   477  0005  3180               	pagesel	$
   478  0006  0000               	nop	; ;# 
   479  0007  0000               	nop	; ;# 
   480  0008  0000               	nop	; ;# 
   481  0009  0000               	nop	; ;# 
   482  000A  0000               	nop	; ;# 
   483  000B  0000               	nop	; ;# 
   484  000C  0000               	nop	; ;# 
   485  000D  0000               	nop	; ;# 
   486  000E  0000               	nop	; ;# 
   487  000F  0000               	nop	; ;# 
   488  0010  0000               	nop	; ;# 
   489  0011  0000               	nop	; ;# 
   490  0012  0000               	nop	; ;# 
   491  0013  0000               	nop	; ;# 
   492  0014  0000               	nop	; ;# 
   493  0015  0000               	nop	; ;# 
   494  0016  0000               	nop	; ;# 
   495  0017  0000               	nop	; ;# 
   496  0018  0000               	nop	; ;# 
   497  0019  0000               	nop	; ;# 
   498  001A  0000               	nop	; ;# 
   499                           
   500                           ;IAP_FW.C: 73: user_isr();
   501  001B  3180  205E         	fcall	_user_isr
   502  001D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   503  001E  0009               	retfie
   504  001F                     __end_of_ISR:	
   505                           
   506                           	psect	text4
   507  005E                     __ptext4:	
   508 ;; *************** function _user_isr *****************
   509 ;; Defined at:
   510 ;;		line 75 in file "IAP_FW.C"
   511 ;; Parameters:    Size  Location     Type
   512 ;;		None
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  i               1    8[COMMON] unsigned char 
   515 ;;  j               1    7[COMMON] unsigned char 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   525 ;;      Params:         0       0       0       0       0       0       0       0
   526 ;;      Locals:         2       0       0       0       0       0       0       0
   527 ;;      Temps:          4       0       0       0       0       0       0       0
   528 ;;      Totals:         6       0       0       0       0       0       0       0
   529 ;;Total ram usage:        6 bytes
   530 ;; Hardware stack levels used:    1
   531 ;; Hardware stack levels required when called:    3
   532 ;; This function calls:
   533 ;;		_Eeprom_Write_Flag
   534 ;;		_iap_mem_erase
   535 ;;		_iap_mem_prog
   536 ;;		_iap_mem_rd
   537 ;;		_iap_usart_rec
   538 ;;		_iap_usart_send
   539 ;;		_iap_wait_tx_idle
   540 ;; This function is called by:
   541 ;;		_ISR
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           
   546                           ;psect for function _user_isr
   547  005E                     _user_isr:	
   548                           
   549                           ;IAP_FW.C: 78: if(URRXNE && RXNEF)
   550                           
   551                           ;incstack = 0
   552                           ; Regs used in _user_isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   553  005E  0029               	movlb	9	; select bank9
   554  005F  180E               	btfsc	14,0	;volatile
   555  0060  1C12               	btfss	18,0	;volatile
   556  0061  2970               	goto	i1l1647
   557                           
   558                           ;IAP_FW.C: 79: {
   559                           ;IAP_FW.C: 80: if(FEF==1)
   560  0062  1992               	btfsc	18,3	;volatile
   561                           
   562                           ;IAP_FW.C: 81: {FEF=0;}
   563  0063  1192               	bcf	18,3	;volatile
   564                           
   565                           ;IAP_FW.C: 82: iap_recdata = URDATAL;
   566  0064  080C               	movf	12,w	;volatile
   567  0065  0020               	movlb	0	; select bank0
   568  0066  00A2               	movwf	34
   569                           
   570                           ;IAP_FW.C: 83: count++;
   571  0067  0AA1               	incf	33,f
   572                           
   573                           ;IAP_FW.C: 84: switch(count)
   574  0068  2881               	goto	i1l5447
   575  0069                     i1l5413:	
   576                           
   577                           ;IAP_FW.C: 87: if(iap_recdata!= 0x46)
   578  0069  3046               	movlw	70
   579  006A                     L1:	
   580  006A  0622               	xorwf	34,w
   581  006B  1903               	btfsc	3,2
   582  006C  288E               	goto	i1l1652
   583  006D                     i1l5415:	
   584                           
   585                           ;IAP_FW.C: 88: {iap_err_flag=1;}
   586  006D  14A0               	bsf	32,1
   587  006E  288E               	goto	i1l1652
   588  006F                     i1l5417:	
   589                           
   590                           ;IAP_FW.C: 91: if(iap_recdata != 0x4D)
   591  006F  304D               	movlw	77
   592  0070  286A               	goto	L1
   593  0071                     i1l5421:	
   594                           
   595                           ;IAP_FW.C: 95: if(iap_recdata != 0x44)
   596  0071  3044               	movlw	68
   597  0072  286A               	goto	L1
   598  0073                     i1l5425:	
   599                           
   600                           ;IAP_FW.C: 99: if(iap_recdata != 0x49)
   601  0073  3049               	movlw	73
   602  0074  286A               	goto	L1
   603  0075                     i1l5429:	
   604                           
   605                           ;IAP_FW.C: 103: if(iap_recdata != 0x41)
   606  0075  3041               	movlw	65
   607  0076  286A               	goto	L1
   608  0077                     i1l5433:	
   609                           
   610                           ;IAP_FW.C: 107: if(iap_recdata != 0x50)
   611  0077  3050               	movlw	80
   612  0078  286A               	goto	L1
   613  0079                     i1l5437:	
   614                           
   615                           ;IAP_FW.C: 111: if(iap_recdata != 0x55)
   616  0079  3055               	movlw	85
   617  007A  286A               	goto	L1
   618  007B                     i1l5441:	
   619                           
   620                           ;IAP_FW.C: 115: if(iap_recdata != 0xaa)
   621  007B  30AA               	movlw	170
   622  007C  0622               	xorwf	34,w
   623  007D  1D03               	btfss	3,2
   624  007E  286D               	goto	i1l5415
   625                           
   626                           ;IAP_FW.C: 117: else
   627                           ;IAP_FW.C: 118: {iap_ok_flag=1;}
   628  007F  1520               	bsf	32,2
   629  0080  288E               	goto	i1l1652
   630  0081                     i1l5447:	
   631  0081  0821               	movf	33,w
   632                           
   633                           ; Switch size 1, requested type "space"
   634                           ; Number of cases is 8, Range of values is 1 to 8
   635                           ; switch strategies available:
   636                           ; Name         Instructions Cycles
   637                           ; direct_byte           25     9 (fixed)
   638                           ; simple_byte           25    13 (average)
   639                           ; jumptable            263     9 (fixed)
   640                           ;	Chosen strategy is direct_byte
   641  0082  3EFF               	addlw	-1
   642  0083  1C03               	skipc
   643  0084  286D               	goto	i1l5415
   644  0085  0084               	movwf	4
   645  0086  3008               	movlw	8
   646  0087  0204               	subwf	4,w
   647  0088  1803               	skipnc
   648  0089  286D               	goto	i1l5415
   649  008A  3181               	movlp	high i1S5733
   650  008B  3504               	lslf	4,w
   651  008C  3ED6               	addlw	low i1S5733
   652  008D  0082               	movwf	2
   653  008E                     i1l1652:	
   654                           
   655                           ;IAP_FW.C: 124: if(iap_ok_flag==1)
   656  008E  1D20               	btfss	32,2
   657  008F  2967               	goto	i1l1669
   658                           
   659                           ;IAP_FW.C: 125: {
   660                           ;IAP_FW.C: 126: count=0;
   661  0090  01A1               	clrf	33
   662                           
   663                           ;IAP_FW.C: 127: iap_ok_flag =0;
   664  0091  1120               	bcf	32,2
   665                           
   666                           ;IAP_FW.C: 128: unsigned char i ,j;
   667                           ;IAP_FW.C: 129: URRXNE &= ~(0X1<<0 );
   668  0092  0029               	movlb	9	; select bank9
   669  0093  100E               	bcf	14,0	;volatile
   670                           
   671                           ;IAP_FW.C: 130: Eeprom_Write_Flag(0xff);
   672  0094  30FF               	movlw	255
   673  0095  2194  3180         	fcall	_Eeprom_Write_Flag
   674                           
   675                           ;IAP_FW.C: 131: EECON1 = (0x1<<7 )|(0X1<<2 );
   676  0097  3084               	movlw	132
   677  0098  0095               	movwf	21	;volsfr
   678                           
   679                           ;IAP_FW.C: 132: iap_usart_send(0xaa);
   680  0099  30AA               	movlw	170
   681  009A                     L2:	
   682  009A  218D  3180         	fcall	_iap_usart_send
   683                           
   684                           ;IAP_FW.C: 137: switch(iap_databuf[0])
   685  009C  2953               	goto	i1l5461
   686  009D                     i1l5463:	
   687                           
   688                           ;IAP_FW.C: 140: CRC_H=iap_usart_rec();
   689  009D  2172  3180         	fcall	_iap_usart_rec
   690  009F  0020               	movlb	0	; select bank0
   691  00A0  00A4               	movwf	36
   692                           
   693                           ;IAP_FW.C: 141: CRC_L=iap_usart_rec();
   694  00A1  2172  3180         	fcall	_iap_usart_rec
   695  00A3  0020               	movlb	0	; select bank0
   696                           
   697                           ;IAP_FW.C: 142: if(CRC_16 < 0X200)
   698  00A4  21D2  3180         	fcall	PL4	;call to abstracted procedure
   699  00A6  1903               	skipnz
   700  00A7  0223               	subwf	35,w
   701  00A8  1C03               	btfss	3,0
   702  00A9  2907               	goto	i1l5525
   703                           
   704                           ;IAP_FW.C: 146: }
   705                           ;IAP_FW.C: 147: for(CRC_16=0x200;CRC_16<=0x1000-0x20;CRC_16+=0x20)
   706                           
   707                           ;IAP_FW.C: 145: break;
   708                           
   709                           ;IAP_FW.C: 143: {
   710                           ;IAP_FW.C: 144: iap_usart_send(0x44);
   711  00AA  3002               	movlw	2
   712  00AB  00A4               	movwf	36
   713  00AC  01A3               	clrf	35
   714  00AD                     i1l5469:	
   715  00AD  300F               	movlw	15
   716  00AE  0224               	subwf	36,w
   717  00AF  30E1               	movlw	225
   718  00B0  1903               	skipnz
   719  00B1  0223               	subwf	35,w
   720  00B2  1803               	btfsc	3,0
   721  00B3  2923               	goto	i1l5547
   722                           
   723                           ;IAP_FW.C: 148: {
   724                           ;IAP_FW.C: 149: EEADRH = CRC_H;
   725                           
   726                           ;IAP_FW.C: 150: EEADRL = CRC_L;
   727  00B4  21CA  3180         	fcall	PL2	;call to abstracted procedure
   728                           
   729                           ;IAP_FW.C: 151: iap_mem_erase();
   730  00B6  21B5  3180         	fcall	_iap_mem_erase
   731  00B8  3020               	movlw	32
   732  00B9  0020               	movlb	0	; select bank0
   733  00BA  07A3               	addwf	35,f
   734  00BB  1803               	skipnc
   735  00BC  0AA4               	incf	36,f
   736  00BD  28AD               	goto	i1l5469
   737  00BE                     i1l1677:	
   738                           ;IAP_FW.C: 155: case 0X05:
   739                           
   740                           ;IAP_FW.C: 154: break;
   741                           
   742                           ;IAP_FW.C: 152: }
   743                           ;IAP_FW.C: 153: iap_usart_send(0X00);
   744                           
   745                           
   746                           ;IAP_FW.C: 156: for(i=1;i<69;i++)
   747  00BE  01FA               	clrf	user_isr@i
   748  00BF  0AFA               	incf	user_isr@i,f
   749  00C0                     i1l5487:	
   750                           
   751                           ;IAP_FW.C: 157: {
   752                           ;IAP_FW.C: 158: iap_databuf[i]=iap_usart_rec();
   753  00C0  087A               	movf	user_isr@i,w
   754  00C1  3E25               	addlw	(low (_iap_databuf| 0))& (0+255)
   755  00C2  0086               	movwf	6
   756  00C3  0187               	clrf	7
   757  00C4  2172  3180         	fcall	_iap_usart_rec
   758  00C6  0081               	movwf	1
   759  00C7  3045               	movlw	69
   760  00C8  0AFA               	incf	user_isr@i,f
   761  00C9  027A               	subwf	user_isr@i,w
   762  00CA  1C03               	skipc
   763  00CB  28C0               	goto	i1l5487
   764                           
   765                           ;IAP_FW.C: 159: }
   766                           ;IAP_FW.C: 160: CRC_16 = 0;
   767  00CC  0020               	movlb	0	; select bank0
   768  00CD  01A3               	clrf	35
   769  00CE  01A4               	clrf	36
   770                           
   771                           ;IAP_FW.C: 161: for(i=0;i<67;i++)
   772  00CF  01FA               	clrf	user_isr@i
   773  00D0                     i1l5499:	
   774                           
   775                           ;IAP_FW.C: 162: {
   776                           ;IAP_FW.C: 163: CRC_16 ^= iap_databuf[i];
   777  00D0  087A               	movf	user_isr@i,w
   778  00D1  3E25               	addlw	(low (_iap_databuf| 0))& (0+255)
   779  00D2  0086               	movwf	6
   780  00D3  0187               	clrf	7
   781  00D4  0801               	movf	1,w
   782  00D5  06A3               	xorwf	35,f
   783                           
   784                           ;IAP_FW.C: 164: for(j = 0;j < 8;j++)
   785  00D6  01F9               	clrf	user_isr@j
   786  00D7                     i1l1682:	
   787                           
   788                           ;IAP_FW.C: 165: {
   789                           ;IAP_FW.C: 166: if(CRC_16 & 0x01)
   790  00D7  1C23               	btfss	35,0
   791  00D8  28EA               	goto	i1l5509
   792                           
   793                           ;IAP_FW.C: 167: CRC_16 = (CRC_16 >> 1) ^ 0x8408;
   794  00D9  0824               	movf	36,w
   795  00DA  00F6               	movwf	??_user_isr+1
   796  00DB  0823               	movf	35,w
   797  00DC  00F5               	movwf	??_user_isr
   798  00DD  3008               	movlw	8
   799  00DE  36F6               	lsrf	??_user_isr+1,f
   800  00DF  0CF5               	rrf	??_user_isr,f
   801  00E0  0675               	xorwf	??_user_isr,w
   802  00E1  00F7               	movwf	??_user_isr+2
   803  00E2  3084               	movlw	132
   804  00E3  0676               	xorwf	??_user_isr+1,w
   805  00E4  00F8               	movwf	??_user_isr+3
   806  00E5  0877               	movf	??_user_isr+2,w
   807  00E6  00A3               	movwf	35
   808  00E7  0878               	movf	??_user_isr+3,w
   809  00E8  00A4               	movwf	36
   810  00E9  28EC               	goto	i1l1685
   811  00EA                     i1l5509:	
   812                           
   813                           ;IAP_FW.C: 168: else
   814                           ;IAP_FW.C: 169: CRC_16 = CRC_16 >> 1;
   815  00EA  36A4               	lsrf	36,f
   816  00EB  0CA3               	rrf	35,f
   817  00EC                     i1l1685:	
   818  00EC  3008               	movlw	8
   819  00ED  0AF9               	incf	user_isr@j,f
   820  00EE  0279               	subwf	user_isr@j,w
   821  00EF  1C03               	skipc
   822  00F0  28D7               	goto	i1l1682
   823  00F1  3043               	movlw	67
   824  00F2  0AFA               	incf	user_isr@i,f
   825  00F3  027A               	subwf	user_isr@i,w
   826  00F4  1C03               	skipc
   827  00F5  28D0               	goto	i1l5499
   828                           
   829                           ;IAP_FW.C: 170: }
   830                           ;IAP_FW.C: 171: }
   831                           ;IAP_FW.C: 172: if((CRC_H !=iap_databuf[67]) || (CRC_L !=iap_databuf[68]))
   832  00F6  0868               	movf	_iap_databuf+67,w
   833  00F7  0624               	xorwf	36,w
   834  00F8  1D03               	skipz
   835  00F9  2907               	goto	i1l5525
   836  00FA  0869               	movf	_iap_databuf+68,w
   837  00FB  0623               	xorwf	35,w
   838  00FC  1D03               	btfss	3,2
   839  00FD  2907               	goto	i1l5525
   840                           
   841                           ;IAP_FW.C: 176: }
   842                           ;IAP_FW.C: 177: CRC_H = iap_databuf[1];
   843                           
   844                           ;IAP_FW.C: 175: break;
   845                           
   846                           ;IAP_FW.C: 173: {
   847                           ;IAP_FW.C: 174: iap_usart_send(0x44);
   848  00FE  0826               	movf	_iap_databuf+1,w
   849  00FF  00A4               	movwf	36
   850                           
   851                           ;IAP_FW.C: 178: CRC_L = iap_databuf[2];
   852  0100  0827               	movf	_iap_databuf+2,w
   853                           
   854                           ;IAP_FW.C: 179: if(CRC_16 < 0X200)
   855  0101  21D2  3180         	fcall	PL4	;call to abstracted procedure
   856  0103  1903               	skipnz
   857  0104  0223               	subwf	35,w
   858  0105  1803               	skipnc
   859  0106  2909               	goto	i1l5527
   860  0107                     i1l5525:	
   861                           
   862                           ;IAP_FW.C: 180: {
   863                           ;IAP_FW.C: 181: iap_usart_send(0x44);
   864  0107  3044               	movlw	68
   865  0108  289A               	goto	L2
   866  0109                     i1l5527:	
   867                           ;IAP_FW.C: 182: break;
   868                           
   869                           
   870                           ;IAP_FW.C: 183: }
   871                           ;IAP_FW.C: 184: for(i=0;i<64;i=i+2)
   872  0109  01FA               	clrf	user_isr@i
   873  010A                     i1l5533:	
   874                           
   875                           ;IAP_FW.C: 185: {
   876                           ;IAP_FW.C: 186: EEADRH = CRC_H;
   877                           
   878                           ;IAP_FW.C: 187: EEADRL = CRC_L;
   879  010A  21CA  3180         	fcall	PL2	;call to abstracted procedure
   880                           
   881                           ;IAP_FW.C: 188: EEDATH = iap_databuf[i+3];
   882  010C  087A               	movf	user_isr@i,w
   883  010D  3E28               	addlw	(low ((_iap_databuf| 0+3)))& (0+255)
   884  010E  0086               	movwf	6
   885  010F  0187               	clrf	7
   886  0110  0801               	movf	1,w
   887  0111  0094               	movwf	20	;volatile
   888                           
   889                           ;IAP_FW.C: 189: EEDATL = iap_databuf[i+4];
   890  0112  087A               	movf	user_isr@i,w
   891  0113  3E29               	addlw	(low ((_iap_databuf| 0+4)))& (0+255)
   892  0114  0086               	movwf	6
   893  0115  0801               	movf	1,w
   894  0116  0093               	movwf	19	;volatile
   895                           
   896                           ;IAP_FW.C: 190: iap_mem_prog();
   897  0117  21A4  3180         	fcall	_iap_mem_prog
   898                           
   899                           ;IAP_FW.C: 191: CRC_16++;
   900  0119  0020               	movlb	0	; select bank0
   901  011A  0AA3               	incf	35,f
   902  011B  1903               	skipnz
   903  011C  0AA4               	incf	36,f
   904  011D  3040               	movlw	64
   905  011E  0AFA               	incf	user_isr@i,f
   906  011F  0AFA               	incf	user_isr@i,f
   907  0120  027A               	subwf	user_isr@i,w
   908  0121  1C03               	skipc
   909  0122  290A               	goto	i1l5533
   910  0123                     i1l5547:	
   911                           
   912                           ;IAP_FW.C: 192: }
   913                           ;IAP_FW.C: 193: iap_usart_send(0X00);
   914  0123  3000               	movlw	0
   915  0124  289A               	goto	L2
   916  0125                     i1l5549:	
   917                           ;IAP_FW.C: 194: break;
   918                           
   919                           
   920                           ;IAP_FW.C: 196: CRC_H=iap_usart_rec();
   921  0125  2172  3180         	fcall	_iap_usart_rec
   922  0127  0020               	movlb	0	; select bank0
   923  0128  00A4               	movwf	36
   924                           
   925                           ;IAP_FW.C: 197: CRC_L=iap_usart_rec();
   926  0129  2172  3180         	fcall	_iap_usart_rec
   927  012B  0020               	movlb	0	; select bank0
   928  012C  00A3               	movwf	35
   929                           
   930                           ;IAP_FW.C: 198: for(i=0;i<32;i++)
   931  012D  01FA               	clrf	user_isr@i
   932  012E                     i1l5557:	
   933                           
   934                           ;IAP_FW.C: 199: {
   935                           ;IAP_FW.C: 200: EEADRH = CRC_H;
   936                           
   937                           ;IAP_FW.C: 201: EEADRL = CRC_L;
   938  012E  21CA  3180         	fcall	PL2	;call to abstracted procedure
   939                           
   940                           ;IAP_FW.C: 202: iap_mem_rd();
   941  0130  21BC  3180         	fcall	_iap_mem_rd
   942                           
   943                           ;IAP_FW.C: 203: iap_usart_send(EEDATH);
   944  0132  0814               	movf	20,w	;volatile
   945  0133  218D  3180         	fcall	_iap_usart_send
   946                           
   947                           ;IAP_FW.C: 204: iap_usart_send(EEDATL);
   948  0135  0023               	movlb	3	; select bank3
   949  0136  0813               	movf	19,w	;volatile
   950  0137  218D  3180         	fcall	_iap_usart_send
   951                           
   952                           ;IAP_FW.C: 205: CRC_16++;
   953  0139  0020               	movlb	0	; select bank0
   954  013A  0AA3               	incf	35,f
   955  013B  1903               	skipnz
   956  013C  0AA4               	incf	36,f
   957  013D  3020               	movlw	32
   958  013E  0AFA               	incf	user_isr@i,f
   959  013F  027A               	subwf	user_isr@i,w
   960  0140  1803               	btfsc	3,0
   961  0141  2953               	goto	i1l5461
   962  0142  292E               	goto	i1l5557
   963  0143                     i1l5567:	
   964                           
   965                           ;IAP_FW.C: 209: Eeprom_Write_Flag(0);
   966  0143  3000               	movlw	0
   967  0144  2194  3180         	fcall	_Eeprom_Write_Flag
   968                           
   969                           ;IAP_FW.C: 210: iap_usart_send(0X00);
   970  0146  3000               	movlw	0
   971  0147  218D  3180         	fcall	_iap_usart_send
   972                           
   973                           ;IAP_FW.C: 211: iap_wait_tx_idle();
   974  0149  219D  3180         	fcall	_iap_wait_tx_idle
   975  014B  0001               	reset	;# 
   976                           
   977                           ;IAP_FW.C: 213: break;
   978  014C  2953               	goto	i1l5461
   979  014D                     i1l5569:	
   980                           
   981                           ;IAP_FW.C: 216: iap_usart_send(0x44);
   982  014D  3044               	movlw	68
   983  014E  218D  3180         	fcall	_iap_usart_send
   984                           
   985                           ;IAP_FW.C: 217: iap_wait_tx_idle();
   986  0150  219D  3180         	fcall	_iap_wait_tx_idle
   987  0152  0001               	reset	;# 
   988  0153                     i1l5461:	
   989                           ;IAP_FW.C: 219: break;
   990                           
   991                           
   992                           ;IAP_FW.C: 134: {
   993                           ;IAP_FW.C: 135: iap_databuf[0]=iap_usart_rec();
   994  0153  2172  3180         	fcall	_iap_usart_rec
   995  0155  0020               	movlb	0	; select bank0
   996  0156  00A5               	movwf	_iap_databuf
   997  0157  0064               	clrwdt	;# 
   998  0158  0020               	movlb	0	; select bank0
   999  0159  0825               	movf	_iap_databuf,w
  1000                           
  1001                           ; Switch size 1, requested type "space"
  1002                           ; Number of cases is 4, Range of values is 3 to 6
  1003                           ; switch strategies available:
  1004                           ; Name         Instructions Cycles
  1005                           ; simple_byte           13     7 (average)
  1006                           ; direct_byte           17     9 (fixed)
  1007                           ; jumptable            263     9 (fixed)
  1008                           ;	Chosen strategy is simple_byte
  1009  015A  3A03               	xorlw	3	; case 3
  1010  015B  1903               	skipnz
  1011  015C  2925               	goto	i1l5549
  1012  015D  3A07               	xorlw	7	; case 4
  1013  015E  1903               	skipnz
  1014  015F  289D               	goto	i1l5463
  1015  0160  3A01               	xorlw	1	; case 5
  1016  0161  1903               	skipnz
  1017  0162  28BE               	goto	i1l1677
  1018  0163  3A03               	xorlw	3	; case 6
  1019  0164  1903               	skipnz
  1020  0165  2943               	goto	i1l5567
  1021  0166  294D               	goto	i1l5569
  1022  0167                     i1l1669:	
  1023                           
  1024                           ;IAP_FW.C: 221: }
  1025                           ;IAP_FW.C: 222: }
  1026                           ;IAP_FW.C: 224: if(iap_err_flag==1)
  1027  0167  1CA0               	btfss	32,1
  1028  0168  0008               	return
  1029                           
  1030                           ;IAP_FW.C: 225: {
  1031                           ;IAP_FW.C: 226: count=0;
  1032  0169  01A1               	clrf	33
  1033                           
  1034                           ;IAP_FW.C: 227: iap_err_flag=0;
  1035  016A  10A0               	bcf	32,1
  1036                           
  1037                           ;IAP_FW.C: 228: if(read_flag !=1)
  1038  016B  1820               	btfsc	32,0
  1039  016C  0008               	return
  1040                           
  1041                           ;IAP_FW.C: 229: {
  1042                           ;IAP_FW.C: 230: uart_rxnef=1;
  1043  016D  15A0               	bsf	32,3
  1044  016E  2A04               	goto	516	;# 
  1045  016F  0008               	return
  1046  0170                     i1l1647:	
  1047  0170  2A04               	goto	516	;# 
  1048  0171  0008               	return
  1049  0172                     __end_of_user_isr:	
  1050  0172                     __ptext7:	
  1051 ;; *************** function _iap_usart_rec *****************
  1052 ;; Defined at:
  1053 ;;		line 48 in file "USART_DRV.C"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  a               2    1[COMMON] unsigned int 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      unsigned char 
  1060 ;; Registers used:
  1061 ;;		wreg, status,2, status,0, pclath, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/9
  1064 ;;		On exit  : 1F/9
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1067 ;;      Params:         0       0       0       0       0       0       0       0
  1068 ;;      Locals:         2       0       0       0       0       0       0       0
  1069 ;;      Temps:          0       0       0       0       0       0       0       0
  1070 ;;      Totals:         2       0       0       0       0       0       0       0
  1071 ;;Total ram usage:        2 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    1
  1074 ;; This function calls:
  1075 ;;		_DelayUs
  1076 ;; This function is called by:
  1077 ;;		_user_isr
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function _iap_usart_rec
  1083  0172                     _iap_usart_rec:	
  1084                           
  1085                           ;USART_DRV.C: 50: unsigned int a;
  1086                           ;USART_DRV.C: 51: for(a=0;a<47200;a++)
  1087                           
  1088                           ;incstack = 0
  1089                           ; Regs used in _iap_usart_rec: [wreg+status,2+status,0+pclath+cstack]
  1090  0172  01F3               	clrf	iap_usart_rec@a
  1091  0173  01F4               	clrf	iap_usart_rec@a+1
  1092  0174                     i1l5365:	
  1093                           
  1094                           ;USART_DRV.C: 52: {
  1095                           ;USART_DRV.C: 53: DelayUs();
  1096  0174  21C2  3180         	fcall	_DelayUs
  1097                           
  1098                           ;USART_DRV.C: 54: if(((0x1 << 0 ) & URLSR))
  1099  0176  0029               	movlb	9	; select bank9
  1100  0177  1C12               	btfss	18,0	;volatile
  1101  0178  2982               	goto	i1l5383
  1102                           
  1103                           ;USART_DRV.C: 55: {
  1104                           ;USART_DRV.C: 56: if((URLSR & (0x1<<2 )) || (URLSR & (0x1<<3 )))
  1105  0179  1912               	btfsc	18,2	;volatile
  1106  017A  297D               	goto	i1l5373
  1107  017B  1D92               	btfss	18,3	;volatile
  1108  017C  2980               	goto	i1l5379
  1109  017D                     i1l5373:	
  1110                           
  1111                           ;USART_DRV.C: 57: {
  1112                           ;USART_DRV.C: 58: URLSR = ~((0x1<<2 )|(0x1<<3 ));
  1113  017D  30F3               	movlw	243
  1114  017E  0092               	movwf	18	;volatile
  1115                           
  1116                           ;USART_DRV.C: 59: return 0xff;
  1117  017F  34FF               	retlw	255
  1118  0180                     i1l5379:	
  1119                           
  1120                           ;USART_DRV.C: 61: else
  1121                           ;USART_DRV.C: 62: {
  1122                           ;USART_DRV.C: 63: return URDATAL;
  1123  0180  080C               	movf	12,w	;volatile
  1124  0181  0008               	return
  1125  0182                     i1l5383:	
  1126  0182  0AF3               	incf	iap_usart_rec@a,f
  1127  0183  1903               	skipnz
  1128  0184  0AF4               	incf	iap_usart_rec@a+1,f
  1129  0185  30B8               	movlw	184
  1130  0186  0274               	subwf	iap_usart_rec@a+1,w
  1131  0187  3060               	movlw	96
  1132  0188  1903               	skipnz
  1133  0189  0273               	subwf	iap_usart_rec@a,w
  1134  018A  1803               	btfsc	3,0
  1135                           
  1136                           ;USART_DRV.C: 64: }
  1137                           ;USART_DRV.C: 65: }
  1138                           ;USART_DRV.C: 66: }
  1139                           ;USART_DRV.C: 67: return 0xff;
  1140  018B  34FF               	retlw	255
  1141  018C  2974               	goto	i1l5365
  1142  018D                     __end_of_iap_usart_rec:	
  1143  018D                     __ptext6:	
  1144 ;; *************** function _iap_usart_send *****************
  1145 ;; Defined at:
  1146 ;;		line 43 in file "USART_DRV.C"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  data            1    wreg     unsigned char 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  data            1    0[COMMON] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/3
  1157 ;;		On exit  : 1F/9
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1160 ;;      Params:         0       0       0       0       0       0       0       0
  1161 ;;      Locals:         1       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0
  1163 ;;      Totals:         1       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        1 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_user_isr
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _iap_usart_send
  1175  018D                     _iap_usart_send:	
  1176                           
  1177                           ;incstack = 0
  1178                           ; Regs used in _iap_usart_send: [wreg]
  1179                           ;iap_usart_send@data stored from wreg
  1180  018D  00F2               	movwf	iap_usart_send@data
  1181  018E                     i1l4934:	
  1182                           ;USART_DRV.C: 45: while(!(URLSR & (0x1<<5 )));
  1183                           
  1184  018E  0029               	movlb	9	; select bank9
  1185  018F  1E92               	btfss	18,5	;volatile
  1186  0190  298E               	goto	i1l4934
  1187                           
  1188                           ;USART_DRV.C: 46: URDATAL = data;
  1189  0191  0872               	movf	iap_usart_send@data,w
  1190  0192  008C               	movwf	12	;volatile
  1191  0193  0008               	return
  1192  0194                     __end_of_iap_usart_send:	
  1193  0194                     __ptext11:	
  1194 ;; *************** function _Eeprom_Write_Flag *****************
  1195 ;; Defined at:
  1196 ;;		line 33 in file "IAP_FW.C"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;  data            1    wreg     unsigned char 
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  data            1    0[COMMON] unsigned char 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  1    wreg      void 
  1203 ;; Registers used:
  1204 ;;		wreg, status,2, status,0, pclath, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/9
  1207 ;;		On exit  : 1F/3
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1210 ;;      Params:         0       0       0       0       0       0       0       0
  1211 ;;      Locals:         1       0       0       0       0       0       0       0
  1212 ;;      Temps:          0       0       0       0       0       0       0       0
  1213 ;;      Totals:         1       0       0       0       0       0       0       0
  1214 ;;Total ram usage:        1 bytes
  1215 ;; Hardware stack levels used:    1
  1216 ;; Hardware stack levels required when called:    2
  1217 ;; This function calls:
  1218 ;;		_iap_mem_prog
  1219 ;; This function is called by:
  1220 ;;		_user_isr
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           
  1225                           ;psect for function _Eeprom_Write_Flag
  1226  0194                     _Eeprom_Write_Flag:	
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in _Eeprom_Write_Flag: [wreg+status,2+status,0+pclath+cstack]
  1230                           ;Eeprom_Write_Flag@data stored from wreg
  1231  0194  00F2               	movwf	Eeprom_Write_Flag@data
  1232                           
  1233                           ;IAP_FW.C: 35: EECON1 &=~(0x1<<7 );
  1234  0195  0023               	movlb	3	; select bank3
  1235  0196  1395               	bcf	21,7	;volsfr
  1236                           
  1237                           ;IAP_FW.C: 36: EECON1 =(0X1<<2 );
  1238  0197  3004               	movlw	4
  1239  0198  0095               	movwf	21	;volsfr
  1240                           
  1241                           ;IAP_FW.C: 37: EEADRL=0;
  1242  0199  0191               	clrf	17	;volatile
  1243                           
  1244                           ;IAP_FW.C: 38: EEDATL=data;
  1245  019A  0872               	movf	Eeprom_Write_Flag@data,w
  1246  019B  0093               	movwf	19	;volatile
  1247                           
  1248                           ;IAP_FW.C: 39: iap_mem_prog();
  1249  019C  29A4               	ljmp	i1l5331
  1250  019D                     __end_of_Eeprom_Write_Flag:	
  1251  019D                     __ptext5:	
  1252 ;; *************** function _iap_wait_tx_idle *****************
  1253 ;; Defined at:
  1254 ;;		line 70 in file "USART_DRV.C"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      void 
  1261 ;; Registers used:
  1262 ;;		wreg, status,2
  1263 ;; Tracked objects:
  1264 ;;		On entry : 1F/9
  1265 ;;		On exit  : 1F/9
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1268 ;;      Params:         0       0       0       0       0       0       0       0
  1269 ;;      Locals:         0       0       0       0       0       0       0       0
  1270 ;;      Temps:          0       0       0       0       0       0       0       0
  1271 ;;      Totals:         0       0       0       0       0       0       0       0
  1272 ;;Total ram usage:        0 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_user_isr
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           
  1282                           ;psect for function _iap_wait_tx_idle
  1283  019D                     _iap_wait_tx_idle:	
  1284  019D                     i1l5399:	
  1285                           ;USART_DRV.C: 72: while(!(TCF & (0x1<<0 )));
  1286                           
  1287                           ;incstack = 0
  1288                           ; Regs used in _iap_wait_tx_idle: [wreg+status,2]
  1289                           
  1290  019D  3000               	movlw	0
  1291  019E  181C               	btfsc	28,0	;volatile
  1292  019F  3001               	movlw	1
  1293  01A0  3901               	andlw	1
  1294  01A1  1D03               	btfss	3,2
  1295  01A2  0008               	return
  1296  01A3  299D               	goto	i1l5399
  1297  01A4                     __end_of_iap_wait_tx_idle:	
  1298  01A4                     __ptext12:	
  1299 ;; *************** function _iap_mem_prog *****************
  1300 ;; Defined at:
  1301 ;;		line 26 in file "MEM_DRV.C"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;		None
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;		None
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		status,2, status,0, pclath, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 1F/3
  1312 ;;		On exit  : 1F/3
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1315 ;;      Params:         0       0       0       0       0       0       0       0
  1316 ;;      Locals:         0       0       0       0       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0       0
  1318 ;;      Totals:         0       0       0       0       0       0       0       0
  1319 ;;Total ram usage:        0 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    1
  1322 ;; This function calls:
  1323 ;;		_Unlock_Flash
  1324 ;; This function is called by:
  1325 ;;		_Eeprom_Write_Flag
  1326 ;;		_user_isr
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           
  1331                           ;psect for function _iap_mem_prog
  1332  01A4                     _iap_mem_prog:	
  1333  01A4                     i1l5331:	
  1334                           ;incstack = 0
  1335                           ; Regs used in _iap_mem_prog: [status,2+status,0+pclath+cstack]
  1336                           
  1337                           
  1338                           ;MEM_DRV.C: 28: EECON1 &=~(0x1<<4 );
  1339  01A4  1215               	bcf	21,4	;volsfr
  1340                           
  1341                           ;MEM_DRV.C: 29: Unlock_Flash();
  1342  01A5  21AB  3180         	fcall	_Unlock_Flash
  1343  01A7                     i1l3317:	
  1344                           ;MEM_DRV.C: 30: while(EECON1 & (0x1<<1 ));
  1345                           
  1346  01A7  0023               	movlb	3	; select bank3
  1347  01A8  1895               	btfsc	21,1	;volsfr
  1348  01A9  29A7               	goto	i1l3317
  1349  01AA  0008               	return
  1350  01AB                     __end_of_iap_mem_prog:	
  1351  01AB                     __ptext13:	
  1352 ;; *************** function _Unlock_Flash *****************
  1353 ;; Defined at:
  1354 ;;		line 3 in file "MEM_DRV.C"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		None
  1363 ;; Tracked objects:
  1364 ;;		On entry : 1F/3
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1368 ;;      Params:         0       0       0       0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0       0
  1371 ;;      Totals:         0       0       0       0       0       0       0       0
  1372 ;;Total ram usage:        0 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_iap_mem_erase
  1378 ;;		_iap_mem_prog
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           
  1383                           ;psect for function _Unlock_Flash
  1384  01AB                     _Unlock_Flash:	
  1385                           
  1386                           ;incstack = 0
  1387                           ; Regs used in _Unlock_Flash: []
  1388  01AB  3003               	movlw	3	;# 
  1389  01AC  0088               	movwf	8	;# 
  1390  01AD  3055               	movlw	85	;# 
  1391  01AE  0096               	movwf	22	;# 
  1392  01AF  30AA               	movlw	170	;# 
  1393  01B0  0096               	movwf	22	;# 
  1394  01B1  1495               	bsf	21,1	;# 
  1395  01B2  0000               	nop	;# 
  1396  01B3  0000               	nop	;# 
  1397  01B4  0008               	return
  1398  01B5                     __end_of_Unlock_Flash:	
  1399  007E                     btemp	set	126	;btemp
  1400  007E                     int$flags	set	126
  1401  007E                     wtemp0	set	126
  1402  01B5                     __ptext10:	
  1403 ;; *************** function _iap_mem_erase *****************
  1404 ;; Defined at:
  1405 ;;		line 18 in file "MEM_DRV.C"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		status,2, status,0, pclath, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 1F/3
  1416 ;;		On exit  : 1F/3
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1419 ;;      Params:         0       0       0       0       0       0       0       0
  1420 ;;      Locals:         0       0       0       0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0
  1422 ;;      Totals:         0       0       0       0       0       0       0       0
  1423 ;;Total ram usage:        0 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    1
  1426 ;; This function calls:
  1427 ;;		_Unlock_Flash
  1428 ;; This function is called by:
  1429 ;;		_user_isr
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _iap_mem_erase
  1435  01B5                     _iap_mem_erase:	
  1436                           
  1437                           ;MEM_DRV.C: 20: EECON1 |=(0x1<<4 );
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _iap_mem_erase: [status,2+status,0+pclath+cstack]
  1441  01B5  1615               	bsf	21,4	;volsfr
  1442                           
  1443                           ;MEM_DRV.C: 21: Unlock_Flash();
  1444  01B6  21AB  3180         	fcall	_Unlock_Flash
  1445  01B8                     i1l3311:	
  1446                           ;MEM_DRV.C: 22: while(EECON1 & (0x1<<1 ));
  1447                           
  1448  01B8  0023               	movlb	3	; select bank3
  1449  01B9  1895               	btfsc	21,1	;volsfr
  1450  01BA  29B8               	goto	i1l3311
  1451  01BB  0008               	return
  1452  01BC                     __end_of_iap_mem_erase:	
  1453  01BC                     __ptext9:	
  1454 ;; *************** function _iap_mem_rd *****************
  1455 ;; Defined at:
  1456 ;;		line 33 in file "MEM_DRV.C"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;		None
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		None
  1465 ;; Tracked objects:
  1466 ;;		On entry : 1F/3
  1467 ;;		On exit  : 1F/3
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1470 ;;      Params:         0       0       0       0       0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0
  1473 ;;      Totals:         0       0       0       0       0       0       0       0
  1474 ;;Total ram usage:        0 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_user_isr
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           
  1484                           ;psect for function _iap_mem_rd
  1485  01BC                     _iap_mem_rd:	
  1486                           
  1487                           ;MEM_DRV.C: 35: EECON1 |=(0x1<<0 );
  1488                           
  1489                           ;incstack = 0
  1490                           ; Regs used in _iap_mem_rd: []
  1491  01BC  1415               	bsf	21,0	;volsfr
  1492  01BD  0000               	nop	;# 
  1493  01BE                     i1l3323:	
  1494                           ;MEM_DRV.C: 37: while(EECON1 & (0x1<<0 ));
  1495                           
  1496  01BE  0023               	movlb	3	; select bank3
  1497  01BF  1815               	btfsc	21,0	;volsfr
  1498  01C0  29BE               	goto	i1l3323
  1499  01C1  0008               	return
  1500  01C2                     __end_of_iap_mem_rd:	
  1501  01C2                     __ptext8:	
  1502 ;; *************** function _DelayUs *****************
  1503 ;; Defined at:
  1504 ;;		line 35 in file "USART_DRV.C"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  a               1    0[COMMON] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/9
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1518 ;;      Params:         0       0       0       0       0       0       0       0
  1519 ;;      Locals:         1       0       0       0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0
  1521 ;;      Totals:         1       0       0       0       0       0       0       0
  1522 ;;Total ram usage:        1 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; This function calls:
  1525 ;;		Nothing
  1526 ;; This function is called by:
  1527 ;;		_iap_usart_rec
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function _DelayUs
  1533  01C2                     _DelayUs:	
  1534                           
  1535                           ;USART_DRV.C: 37: unsigned char a;
  1536                           ;USART_DRV.C: 38: for(a=0;a<10;a++)
  1537                           
  1538                           ;incstack = 0
  1539                           ; Regs used in _DelayUs: [wreg+status,2+status,0]
  1540  01C2  01F2               	clrf	DelayUs@a
  1541  01C3                     i1l4929:	
  1542                           
  1543                           ;USART_DRV.C: 39: {
  1544                           ;USART_DRV.C: 40: __nop();
  1545  01C3  0000               	nop
  1546  01C4  300A               	movlw	10
  1547  01C5  0AF2               	incf	DelayUs@a,f
  1548  01C6  0272               	subwf	DelayUs@a,w
  1549  01C7  1803               	btfsc	3,0
  1550  01C8  0008               	return
  1551  01C9  29C3               	goto	i1l4929
  1552  01CA                     __end_of_DelayUs:	
  1553  01CA                     PL2:	
  1554  01CA  0824               	movf	36,w
  1555  01CB  0023               	movlb	3	; select bank3
  1556  01CC  0092               	movwf	18	;volatile
  1557  01CD  0020               	movlb	0	; select bank0
  1558  01CE  0823               	movf	35,w
  1559  01CF  0023               	movlb	3	; select bank3
  1560  01D0  0091               	movwf	17	;volatile
  1561  01D1  0008               	return
  1562  01D2                     __end_ofPL2:	
  1563  01D2                     PL4:	
  1564  01D2  00A3               	movwf	35
  1565  01D3  3002               	movlw	2
  1566  01D4  0224               	subwf	36,w
  1567  01D5  3400               	retlw	0
  1568  01D6                     __end_ofPL4:	
  1569                           
  1570                           	psect	swtext1
  1571  01D6                     __pswtext1:	
  1572  01D6                     i1S5733:	
  1573  01D6  3180  2869         	ljmp	i1l5413
  1574  01D8  3180  286F         	ljmp	i1l5417
  1575  01DA  3180  2871         	ljmp	i1l5421
  1576  01DC  3180  2873         	ljmp	i1l5425
  1577  01DE  3180  2875         	ljmp	i1l5429
  1578  01E0  3180  2877         	ljmp	i1l5433
  1579  01E2  3180  2879         	ljmp	i1l5437
  1580  01E4  3180  287B         	ljmp	i1l5441


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           12      9       9
    BANK0            75      1      70
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_user_isr
    _user_isr->_iap_usart_rec
    _iap_usart_rec->_DelayUs

Critical Paths under _main in BANK0

    _main->_EEPROMread

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                         _EEPROMread
                     _iap_usart_init
 ---------------------------------------------------------------------------------
 (1) _iap_usart_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROMread                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  0     0      0     300
                           _user_isr
 ---------------------------------------------------------------------------------
 (3) _user_isr                                             6     6      0     300
                                              3 COMMON     6     6      0
                  _Eeprom_Write_Flag
                      _iap_mem_erase
                       _iap_mem_prog
                         _iap_mem_rd
                      _iap_usart_rec
                     _iap_usart_send
                   _iap_wait_tx_idle
 ---------------------------------------------------------------------------------
 (4) _iap_wait_tx_idle                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _iap_usart_send                                       1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _iap_usart_rec                                        2     2      0      60
                                              1 COMMON     2     2      0
                            _DelayUs
 ---------------------------------------------------------------------------------
 (5) _DelayUs                                              1     1      0      30
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _iap_mem_rd                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _iap_mem_erase                                        0     0      0       0
                       _Unlock_Flash
 ---------------------------------------------------------------------------------
 (4) _Eeprom_Write_Flag                                    1     1      0      15
                                              0 COMMON     1     1      0
                       _iap_mem_prog
 ---------------------------------------------------------------------------------
 (4) _iap_mem_prog                                         0     0      0       0
                       _Unlock_Flash
 ---------------------------------------------------------------------------------
 (5) _Unlock_Flash                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMread
   _iap_usart_init

 _ISR (ROOT)
   _user_isr
     _Eeprom_Write_Flag
       _iap_mem_prog
         _Unlock_Flash
     _iap_mem_erase
       _Unlock_Flash
     _iap_mem_prog
       _Unlock_Flash
     _iap_mem_rd
     _iap_usart_rec
       _DelayUs
     _iap_usart_send
     _iap_wait_tx_idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            C      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               C      9       9       2       75.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4F       4        0.0%
BITBANK0            4B      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               4B      1      46       6       93.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      4F      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


GNU Macro Assembler for 8 bit devices.     
Symbol Table                                                                                   Tue Nov 16 11:48:35 2021

                         pc 0002                          PL2 01CA                          PL4 01D2  
                        _RD 0CA8                         _FEF 2493                         _TCF 24E0  
                       _ISR 0004              ??_iap_mem_prog 0072                         wreg 0009  
                      ?_ISR 0072                        l1708 0038             ??_iap_mem_erase 0072  
                      _AFP1 019F                        _CFGS 0CAE                        _flag 0020  
                      _main 002C                        fsr0h 0005                        fsr1h 0007  
                      indf0 0000                        fsr0l 0004                        indf1 0001  
                      fsr1l 0006                        btemp 007E                        start 001F  
           __end_of_DelayUs 01CA         __size_of_EEPROMread 000F                       ??_ISR 007B  
                     ?_main 0072                       _EEPGD 0CAF                       _BSREG 0008  
                     _CRC_H 0024                       _CRC_L 0023                       _PCKEN 009A  
                     _URDLL 0494                       _TRISB 008D                       _RXNEF 2490  
                     _URLCR 048F                       _URMCR 0491                       _URLSR 0492  
                     _W_TMP 0070                       _count 0021             ??_iap_usart_rec 0073  
                     status 0003                       wtemp0 007E             __initialization 0021  
              __end_of_main 003A                      ??_main 006B            _iap_wait_tx_idle 019D  
                    i1S5733 01D6                      _EEADRH 0192                      _EEADRL 0191  
                    _EEDATH 0194                      _EEDATL 0193                      _EECON1 0195  
                    _CRC_16 0023                      i1l3311 01B8                      i1l3323 01BE  
                    i1l1652 008E                      i1l3317 01A7                      i1l1647 0170  
                    i1l1682 00D7                      i1l1685 00EC                      i1l1677 00BE  
                    i1l1669 0167                      i1l5331 01A4                      i1l5421 0071  
                    i1l5413 0069                      i1l5415 006D                      i1l5441 007B  
                    i1l5433 0077                      i1l5425 0073                      i1l5417 006F  
                    i1l5373 017D                      i1l5365 0174                      i1l5533 010A  
                    i1l5525 0107                      i1l5509 00EA                      i1l5461 0153  
                    i1l5437 0079                      i1l5429 0075                      i1l5383 0182  
                    i1l5527 0109                      i1l5463 009D                      i1l5447 0081  
                    i1l5379 0180                      i1l5547 0123                      i1l5557 012E  
                    i1l5549 0125                      i1l5469 00AD                      i1l4934 018E  
                    i1l5399 019D                      i1l5567 0143                      i1l5487 00C0  
                    i1l4929 01C3                      i1l5569 014D                      i1l5499 00D0  
                    _INTCON 000B                   ??_DelayUs 0072                      _OSCCON 0099  
                    _URRXNE 2470        __end_of_iap_mem_prog 01AB              iap_usart_rec@a 0073  
          ??_iap_usart_init 006A            ??_iap_usart_send 0072                ??_EEPROMread 006A  
          __end_of_user_isr 0172     __end_of__initialization 0029              __pcstackCOMMON 0072  
        __end_of_EEPROMread 005E                  __end_ofPL2 01D2                  __end_ofPL4 01D6  
                __pbssBANK0 0025                  __pmaintext 002C                  __pintentry 0004  
        iap_usart_send@data 0072                  _iap_mem_rd 01BC                     _BSR_TMP 0071  
                   _URDATAL 048C       __size_of_iap_mem_prog 0007                     _DelayUs 01C2  
     __end_of_iap_mem_erase 01BC    __end_of_iap_wait_tx_idle 01A4            EEPROMread@EEAddr 006A  
                 ?_user_isr 0072                     __ptext0 0000                     __ptext1 003A  
                   __ptext2 004F                     __ptext4 005E                     __ptext5 019D  
                   __ptext6 018D                     __ptext7 0172                     __ptext8 01C2  
                   __ptext9 01BC                __size_of_ISR 001B                _iap_err_flag 0101  
              _iap_mem_prog 01A4                     clrloop0 01E7        end_of_initialization 0029  
     __end_of_iap_usart_rec 018D                  ??_user_isr 0075                  _uart_rxnef 0103  
               ?_iap_mem_rd 0072               ?_Unlock_Flash 0072           _Eeprom_Write_Flag 0194  
        ?_Eeprom_Write_Flag 0072         start_initialization 0021                 __end_of_ISR 001F  
            ??_Unlock_Flash 0072         ??_Eeprom_Write_Flag 0072         __size_of_iap_mem_rd 0006  
 __end_of_Eeprom_Write_Flag 019D                   ___latbits 0001               __pcstackBANK0 006A  
   __size_of_iap_usart_init 0015     __size_of_iap_usart_send 0007                    ?_DelayUs 0072  
         ?_iap_wait_tx_idle 0072          ??_iap_wait_tx_idle 0072                   __pswtext1 01D6  
         __size_of_user_isr 0114                 _iap_databuf 0025                   _read_flag 0100  
               _iap_ok_flag 0102                 _iap_recdata 0022                    DelayUs@a 0072  
                 clear_ram0 01E6        __end_of_Unlock_Flash 01B5  __size_of_Eeprom_Write_Flag 0009  
              ??_iap_mem_rd 0072      __size_of_iap_mem_erase 0007            __size_of_DelayUs 0008  
        __end_of_iap_mem_rd 01C2      __size_of_iap_usart_rec 001B       Eeprom_Write_Flag@data 0072  
                _EEPROMread 004F              _iap_usart_init 003A              _iap_usart_send 018D  
                  __ptext10 01B5                    __ptext11 0194                    __ptext12 01A4  
                  __ptext13 01AB               __size_of_main 000E               _iap_mem_erase 01B5  
                  int$flags 007E                    _user_isr 005E      __end_of_iap_usart_init 004F  
    __end_of_iap_usart_send 0194                    intlevel1 0000               _iap_usart_rec 0172  
            ?_iap_mem_erase 0072                   user_isr@i 007A                   user_isr@j 0079  
     __size_of_Unlock_Flash 000A   __size_of_iap_wait_tx_idle 0007             ?_iap_usart_init 0072  
             ?_iap_mem_prog 0072             ?_iap_usart_send 0072                 ?_EEPROMread 0072  
              _Unlock_Flash 01AB              ?_iap_usart_rec 0072  
