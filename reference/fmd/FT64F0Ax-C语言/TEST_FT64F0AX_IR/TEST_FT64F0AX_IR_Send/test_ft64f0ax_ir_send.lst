

GNU Macro Assembler for 8 bit devices.       
                                                                                               Wed Oct 13 09:48:52 2021

GNU C Code Generator                                                 
     1                           	processor	FT64F0AX
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	pa_nodes0,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 
    18                           ; 
    19                           ; SFR Addresses
    20  0000                     
    21                           	psect	idataBANK0
    22  0000                     __pidataBANK0:	
    23  000E                     _PORTC	set	14
    24  000D                     _PORTB	set	13
    25  000C                     _PORTA	set	12
    26  000B                     _INTCON	set	11
    27  006B                     _PB3	set	107
    28  005F                     _GIE	set	95
    29  009A                     _PCKEN	set	154
    30  0099                     _OSCCON	set	153
    31  0095                     _CKOCON	set	149
    32  008E                     _TRISC	set	142
    33  008D                     _TRISB	set	141
    34  008C                     _TRISA	set	140
    35  011C                     _PSRC2	set	284
    36  011B                     _PSRC1	set	283
    37  011A                     _PSRC0	set	282
    38  0117                     _TIM4ARR	set	279
    39  0116                     _TIM4PSCR	set	278
    40  0115                     _TIM4CNTR	set	277
    41  0114                     _TIM4EGR	set	276
    42  0113                     _TIM4SR	set	275
    43  0112                     _TIM4IER	set	274
    44  0111                     _TIM4CR1	set	273
    45  0898                     _T4UIF	set	2200
    46  0890                     _T4UIE	set	2192
    47  019C                     _PSINK2	set	412
    48  019B                     _PSINK1	set	411
    49  019A                     _PSINK0	set	410
    50  0197                     _ANSELA	set	407
    51  018E                     _WPUC	set	398
    52  018D                     _WPUB	set	397
    53  018C                     _WPUA	set	396
    54  020E                     _WPDC	set	526
    55  020D                     _WPDB	set	525
    56  020C                     _WPDA	set	524
    57  031F                     _TCKSRC	set	799
    58  031A                     _TIM2ARRL	set	794
    59  0319                     _TIM2ARRH	set	793
    60  030D                     _TIM2IER	set	781
    61  030C                     _TIM2CR1	set	780
    62  1870                     _T2UIF	set	6256
    63  1868                     _T2UIE	set	6248
    64                           
    65                           	psect	cinit
    66  001D                     start_initialization:	
    67                           ; #config settings
    68                           
    69  001D                     __initialization:	
    70                           
    71                           ;initializer for _IRData
    72  001D  30FF               	movlw	255
    73  001E  01A0               	clrf	__pdataBANK0& (0+127)
    74  001F  00A1               	movwf	(__pdataBANK0+1)& (0+127)
    75  0020  3040               	movlw	64
    76  0021  00A2               	movwf	(__pdataBANK0+2)& (0+127)
    77  0022  30BF               	movlw	191
    78  0023  00A3               	movwf	(__pdataBANK0+3)& (0+127)
    79                           
    80                           ; Clear objects allocated to BITCOMMON
    81  0024  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    82                           
    83                           ; Clear objects allocated to COMMON
    84  0025  01F0               	clrf	__pbssCOMMON& (0+127)
    85  0026  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    86  0027  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    87  0028  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    88  0029  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    89  002A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    90  002B  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    91  002C  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
    92  002D  01F8               	clrf	(__pbssCOMMON+8)& (0+127)
    93  002E  01F9               	clrf	(__pbssCOMMON+9)& (0+127)
    94  002F                     end_of_initialization:	
    95                           ;End of C runtime variable initialization code
    96                           
    97  002F                     __end_of__initialization:	
    98  002F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
    99  0030  0020               	movlb	0
   100  0031  2832               	ljmp	_main	;jump to C main() function
   101  0032                     __pmaintext:	
   102                           ; 1 bytes @ 0x0
   103 ;;
   104 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   105 ;;
   106 ;; *************** function _main *****************
   107 ;; Defined at:
   108 ;;		line 283 in file "TEST_FT64F0AX_IR_Send.C"
   109 ;; Parameters:    Size  Location     Type
   110 ;;		None
   111 ;; Auto vars:     Size  Location     Type
   112 ;;		None
   113 ;; Return value:  Size  Location     Type
   114 ;;                  1    wreg      void 
   115 ;; Registers used:
   116 ;;		wreg, status,2, status,0, pclath, cstack
   117 ;; Tracked objects:
   118 ;;		On entry : B1F/0
   119 ;;		On exit  : B19/0
   120 ;;		Unchanged: B00/0
   121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   126 ;;Total ram usage:        0 bytes
   127 ;; Hardware stack levels required when called:    3
   128 ;; This function calls:
   129 ;;		_POWER_INITIAL
   130 ;;		_TIMER2_INITIAL
   131 ;;		_TIMER4_INITIAL
   132 ;; This function is called by:
   133 ;;		Startup code after reset
   134 ;; This function uses a non-reentrant model
   135 ;;
   136                           
   137                           
   138                           ;psect for function _main
   139  0032                     _main:	
   140                           
   141                           ;TEST_FT64F0AX_IR_Send.C: 285: POWER_INITIAL();
   142                           
   143                           ;incstack = 0
   144                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   145  0032  2045  3180         	fcall	_POWER_INITIAL
   146                           
   147                           ;TEST_FT64F0AX_IR_Send.C: 286: TIMER4_INITIAL();
   148  0034  2079  3180         	fcall	_TIMER4_INITIAL
   149                           
   150                           ;TEST_FT64F0AX_IR_Send.C: 287: TIMER2_INITIAL();
   151  0036  2069  3180         	fcall	_TIMER2_INITIAL
   152                           
   153                           ;TEST_FT64F0AX_IR_Send.C: 288: GIE=1;
   154  0038  178B               	bsf	11,7	;volatile
   155  0039                     l2940:	
   156                           
   157                           ;TEST_FT64F0AX_IR_Send.C: 291: {
   158                           ;TEST_FT64F0AX_IR_Send.C: 292: if(SYSTime5S>5000)
   159  0039  3013               	movlw	19
   160  003A  0271               	subwf	_SYSTime5S+1,w
   161  003B  3089               	movlw	137
   162  003C  1903               	skipnz
   163  003D  0270               	subwf	_SYSTime5S,w
   164  003E  1C03               	skipc
   165  003F  2839               	goto	l2940
   166                           
   167                           ;TEST_FT64F0AX_IR_Send.C: 293: {
   168                           ;TEST_FT64F0AX_IR_Send.C: 294: SYSTime5S=0;
   169  0040  01F0               	clrf	_SYSTime5S
   170  0041  01F1               	clrf	_SYSTime5S+1
   171                           
   172                           ;TEST_FT64F0AX_IR_Send.C: 295: IRSendStatus=1;
   173  0042  01F9               	clrf	_IRSendStatus
   174  0043  0AF9               	incf	_IRSendStatus,f
   175  0044  2839               	goto	l2940
   176  0045                     __end_of_main:	
   177  0045                     __ptext3:	
   178 ;; *************** function _POWER_INITIAL *****************
   179 ;; Defined at:
   180 ;;		line 62 in file "TEST_FT64F0AX_IR_Send.C"
   181 ;; Parameters:    Size  Location     Type
   182 ;;		None
   183 ;; Auto vars:     Size  Location     Type
   184 ;;		None
   185 ;; Return value:  Size  Location     Type
   186 ;;                  1    wreg      void 
   187 ;; Registers used:
   188 ;;		wreg, status,2, status,0
   189 ;; Tracked objects:
   190 ;;		On entry : B1F/0
   191 ;;		On exit  : B1F/3
   192 ;;		Unchanged: B00/0
   193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   198 ;;Total ram usage:        0 bytes
   199 ;; Hardware stack levels used:    1
   200 ;; Hardware stack levels required when called:    2
   201 ;; This function calls:
   202 ;;		Nothing
   203 ;; This function is called by:
   204 ;;		_main
   205 ;; This function uses a non-reentrant model
   206 ;;
   207                           
   208                           
   209                           ;psect for function _POWER_INITIAL
   210  0045                     _POWER_INITIAL:	
   211                           
   212                           ;TEST_FT64F0AX_IR_Send.C: 64: OSCCON=0B01110001;
   213                           
   214                           ;incstack = 0
   215                           ; Regs used in _POWER_INITIAL: [wreg+status,2+status,0]
   216  0045  3071               	movlw	113
   217  0046  0021               	movlb	1	; select bank1
   218  0047  0099               	movwf	25	;volatile
   219                           
   220                           ;TEST_FT64F0AX_IR_Send.C: 65: PCKEN|=0B00001100;
   221  0048  300C               	movlw	12
   222  0049  049A               	iorwf	26,f	;volatile
   223                           
   224                           ;TEST_FT64F0AX_IR_Send.C: 67: INTCON=0;
   225  004A  018B               	clrf	11	;volatile
   226                           
   227                           ;TEST_FT64F0AX_IR_Send.C: 69: PORTA=0B00000000;
   228  004B  0020               	movlb	0	; select bank0
   229  004C  018C               	clrf	12	;volatile
   230                           
   231                           ;TEST_FT64F0AX_IR_Send.C: 70: PORTB=0B00000000;
   232  004D  018D               	clrf	13	;volatile
   233                           
   234                           ;TEST_FT64F0AX_IR_Send.C: 71: PORTC=0B00000000;
   235  004E  018E               	clrf	14	;volatile
   236                           
   237                           ;TEST_FT64F0AX_IR_Send.C: 73: WPUA=0B00000000;
   238  004F  0023               	movlb	3	; select bank3
   239  0050  018C               	clrf	12	;volatile
   240                           
   241                           ;TEST_FT64F0AX_IR_Send.C: 74: WPUB=0B00000000;
   242  0051  018D               	clrf	13	;volatile
   243                           
   244                           ;TEST_FT64F0AX_IR_Send.C: 75: WPUC=0B00000000;
   245  0052  018E               	clrf	14	;volatile
   246                           
   247                           ;TEST_FT64F0AX_IR_Send.C: 77: WPDA=0B00000000;
   248  0053  0024               	movlb	4	; select bank4
   249  0054  018C               	clrf	12	;volatile
   250                           
   251                           ;TEST_FT64F0AX_IR_Send.C: 78: WPDB=0B00000000;
   252  0055  018D               	clrf	13	;volatile
   253                           
   254                           ;TEST_FT64F0AX_IR_Send.C: 79: WPDC=0B00000000;
   255  0056  018E               	clrf	14	;volatile
   256                           
   257                           ;TEST_FT64F0AX_IR_Send.C: 81: TRISA=0B00000000;
   258  0057  0021               	movlb	1	; select bank1
   259  0058  018C               	clrf	12	;volatile
   260                           
   261                           ;TEST_FT64F0AX_IR_Send.C: 82: TRISB=0B00000000;
   262  0059  018D               	clrf	13	;volatile
   263                           
   264                           ;TEST_FT64F0AX_IR_Send.C: 83: TRISC=0B00000000;
   265  005A  018E               	clrf	14	;volatile
   266                           
   267                           ;TEST_FT64F0AX_IR_Send.C: 85: PSRC0=0B11111111;
   268  005B  30FF               	movlw	255
   269  005C  0022               	movlb	2	; select bank2
   270  005D  009A               	movwf	26	;volatile
   271                           
   272                           ;TEST_FT64F0AX_IR_Send.C: 86: PSRC1=0B11111111;
   273  005E  009B               	movwf	27	;volatile
   274                           
   275                           ;TEST_FT64F0AX_IR_Send.C: 87: PSRC2=0B00001111;
   276  005F  300F               	movlw	15
   277  0060  009C               	movwf	28	;volatile
   278                           
   279                           ;TEST_FT64F0AX_IR_Send.C: 89: PSINK0=0B11111111;
   280  0061  30FF               	movlw	255
   281  0062  0023               	movlb	3	; select bank3
   282  0063  009A               	movwf	26	;volatile
   283                           
   284                           ;TEST_FT64F0AX_IR_Send.C: 90: PSINK1=0B11111111;
   285  0064  009B               	movwf	27	;volatile
   286                           
   287                           ;TEST_FT64F0AX_IR_Send.C: 91: PSINK2=0B00000011;
   288  0065  3003               	movlw	3
   289  0066  009C               	movwf	28	;volatile
   290                           
   291                           ;TEST_FT64F0AX_IR_Send.C: 93: ANSELA=0B00000000;
   292  0067  0197               	clrf	23	;volatile
   293  0068  0008               	return
   294  0069                     __end_of_POWER_INITIAL:	
   295  0069                     __ptext2:	
   296 ;; *************** function _TIMER2_INITIAL *****************
   297 ;; Defined at:
   298 ;;		line 117 in file "TEST_FT64F0AX_IR_Send.C"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;		None
   303 ;; Return value:  Size  Location     Type
   304 ;;                  1    wreg      void 
   305 ;; Registers used:
   306 ;;		wreg, status,2
   307 ;; Tracked objects:
   308 ;;		On entry : B1F/2
   309 ;;		On exit  : B1F/6
   310 ;;		Unchanged: B00/0
   311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   316 ;;Total ram usage:        0 bytes
   317 ;; Hardware stack levels used:    1
   318 ;; Hardware stack levels required when called:    2
   319 ;; This function calls:
   320 ;;		Nothing
   321 ;; This function is called by:
   322 ;;		_main
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326                           
   327                           ;psect for function _TIMER2_INITIAL
   328  0069                     _TIMER2_INITIAL:	
   329                           
   330                           ;TEST_FT64F0AX_IR_Send.C: 119: CKOCON=0B00100000;
   331                           
   332                           ;incstack = 0
   333                           ; Regs used in _TIMER2_INITIAL: [wreg+status,2]
   334  0069  3020               	movlw	32
   335  006A  0021               	movlb	1	; select bank1
   336  006B  0095               	movwf	21	;volatile
   337                           
   338                           ;TEST_FT64F0AX_IR_Send.C: 120: TCKSRC=0B00110000;
   339  006C  3030               	movlw	48
   340  006D  0026               	movlb	6	; select bank6
   341  006E  009F               	movwf	31	;volatile
   342                           
   343                           ;TEST_FT64F0AX_IR_Send.C: 122: TIM2CR1=0B10000101;
   344  006F  3085               	movlw	133
   345  0070  008C               	movwf	12	;volatile
   346                           
   347                           ;TEST_FT64F0AX_IR_Send.C: 124: TIM2IER=0B00000000;
   348  0071  018D               	clrf	13	;volatile
   349                           
   350                           ;TEST_FT64F0AX_IR_Send.C: 126: TIM2ARRH=0x01;
   351  0072  3001               	movlw	1
   352  0073  0099               	movwf	25	;volatile
   353                           
   354                           ;TEST_FT64F0AX_IR_Send.C: 127: TIM2ARRL=0xA0;
   355  0074  30A0               	movlw	160
   356  0075  009A               	movwf	26	;volatile
   357                           
   358                           ;TEST_FT64F0AX_IR_Send.C: 129: INTCON=0B11000000;
   359  0076  30C0               	movlw	192
   360  0077  008B               	movwf	11	;volatile
   361  0078  0008               	return
   362  0079                     __end_of_TIMER2_INITIAL:	
   363  0079                     __ptext1:	
   364 ;; *************** function _TIMER4_INITIAL *****************
   365 ;; Defined at:
   366 ;;		line 101 in file "TEST_FT64F0AX_IR_Send.C"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2
   375 ;; Tracked objects:
   376 ;;		On entry : B1F/3
   377 ;;		On exit  : B1F/2
   378 ;;		Unchanged: B00/0
   379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels used:    1
   386 ;; Hardware stack levels required when called:    2
   387 ;; This function calls:
   388 ;;		Nothing
   389 ;; This function is called by:
   390 ;;		_main
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           
   395                           ;psect for function _TIMER4_INITIAL
   396  0079                     _TIMER4_INITIAL:	
   397                           
   398                           ;TEST_FT64F0AX_IR_Send.C: 103: TIM4CR1=0B00000101;
   399                           
   400                           ;incstack = 0
   401                           ; Regs used in _TIMER4_INITIAL: [wreg+status,2]
   402  0079  3005               	movlw	5
   403  007A  0022               	movlb	2	; select bank2
   404  007B  0091               	movwf	17	;volatile
   405                           
   406                           ;TEST_FT64F0AX_IR_Send.C: 104: TIM4IER=0B00000001;
   407  007C  3001               	movlw	1
   408  007D  0092               	movwf	18	;volatile
   409                           
   410                           ;TEST_FT64F0AX_IR_Send.C: 105: TIM4SR=0B00000000;
   411  007E  0193               	clrf	19	;volatile
   412                           
   413                           ;TEST_FT64F0AX_IR_Send.C: 106: TIM4EGR=0B00000000;
   414  007F  0194               	clrf	20	;volatile
   415                           
   416                           ;TEST_FT64F0AX_IR_Send.C: 107: TIM4CNTR=0;
   417  0080  0195               	clrf	21	;volatile
   418                           
   419                           ;TEST_FT64F0AX_IR_Send.C: 108: TIM4PSCR=0B00000110;
   420  0081  3006               	movlw	6
   421  0082  0096               	movwf	22	;volatile
   422                           
   423                           ;TEST_FT64F0AX_IR_Send.C: 109: TIM4ARR=140;
   424  0083  308C               	movlw	140
   425  0084  0097               	movwf	23	;volatile
   426  0085  0008               	return
   427  0086                     __end_of_TIMER4_INITIAL:	
   428                           
   429                           	psect	bitbssCOMMON
   430  03E8                     __pbitbssCOMMON:	
   431  03E8                     _SendLastBit:	
   432  03E8                     	ds	1
   433                           
   434                           	psect	bssCOMMON
   435  0070                     __pbssCOMMON:	
   436  0070                     _SYSTime5S:	
   437  0070                     	ds	2
   438  0072                     _SaveLastBit:	
   439  0072                     	ds	1
   440  0073                     _level1:	
   441  0073                     	ds	1
   442  0074                     _level0:	
   443  0074                     	ds	1
   444  0075                     _Sendbit:	
   445  0075                     	ds	1
   446  0076                     _TxTime:	
   447  0076                     	ds	1
   448  0077                     _TxBit:	
   449  0077                     	ds	1
   450  0078                     _IRSendData:	
   451  0078                     	ds	1
   452  0079                     _IRSendStatus:	
   453  0079                     	ds	1
   454                           
   455                           	psect	dataBANK0
   456  0020                     __pdataBANK0:	
   457  0020                     _IRData:	
   458  0020                     	ds	4
   459                           
   460                           	psect	cstackCOMMON
   461  007A                     __pcstackCOMMON:	
   462  007A                     ?_POWER_INITIAL:	
   463  007A                     ?_TIMER4_INITIAL:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  007A                     ?_TIMER2_INITIAL:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  007A                     ?_SendCtrl:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  007A                     ??_SendCtrl:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  007A                     ?_ISR:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  007A                     ?_main:	
   479                           ; 1 bytes @ 0x0
   480                           
   481                           
   482                           ; 1 bytes @ 0x0
   483  007A                     	ds	3
   484  007D                     ??_ISR:	
   485                           
   486                           	psect	cstackBANK0
   487  0000                     __pcstackBANK0:	
   488                           ; 1 bytes @ 0x3
   489                           
   490  0000                     ??_POWER_INITIAL:	
   491  0000                     ??_TIMER4_INITIAL:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0000                     ??_TIMER2_INITIAL:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0000                     ??_main:	
   498                           ; 1 bytes @ 0x0
   499                           
   500                           
   501                           	psect	intentry
   502  0004                     __pintentry:	
   503 ;; *************** function _ISR *****************
   504 ;; Defined at:
   505 ;;		line 257 in file "TEST_FT64F0AX_IR_Send.C"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 19/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   523 ;;Total ram usage:        0 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; Hardware stack levels required when called:    1
   526 ;; This function calls:
   527 ;;		_SendCtrl
   528 ;; This function is called by:
   529 ;;		Interrupt level 1
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533  0004                     _ISR:	
   534                           
   535                           ;incstack = 0
   536  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   537                           
   538                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   539  0005  3180               	pagesel	$
   540                           
   541                           ;TEST_FT64F0AX_IR_Send.C: 260: if(T4UIE&&T4UIF)
   542  0006  0022               	movlb	2	; select bank2
   543  0007  1812               	btfsc	18,0	;volatile
   544  0008  1C13               	btfss	19,0	;volatile
   545  0009  2811               	goto	i1l2862
   546                           
   547                           ;TEST_FT64F0AX_IR_Send.C: 261: {
   548                           ;TEST_FT64F0AX_IR_Send.C: 262: T4UIF=1;
   549  000A  1413               	bsf	19,0	;volatile
   550                           
   551                           ;TEST_FT64F0AX_IR_Send.C: 264: SendCtrl();
   552  000B  3180  2086  3180   	fcall	_SendCtrl
   553                           
   554                           ;TEST_FT64F0AX_IR_Send.C: 265: SYSTime5S++;
   555  000E  0AF0               	incf	_SYSTime5S,f
   556  000F  1903               	skipnz
   557  0010  0AF1               	incf	_SYSTime5S+1,f
   558  0011                     i1l2862:	
   559                           
   560                           ;TEST_FT64F0AX_IR_Send.C: 266: }
   561                           ;TEST_FT64F0AX_IR_Send.C: 269: if(T2UIE&&T2UIF)
   562  0011  0026               	movlb	6	; select bank6
   563  0012  180D               	btfsc	13,0	;volatile
   564  0013  1C0E               	btfss	14,0	;volatile
   565  0014  2819               	goto	i1l2177
   566                           
   567                           ;TEST_FT64F0AX_IR_Send.C: 270: {
   568                           ;TEST_FT64F0AX_IR_Send.C: 271: T2UIF=1;
   569  0015  140E               	bsf	14,0	;volatile
   570                           
   571                           ;TEST_FT64F0AX_IR_Send.C: 273: PB3=~PB3;
   572  0016  3008               	movlw	8
   573  0017  0020               	movlb	0	; select bank0
   574  0018  068D               	xorwf	13,f
   575  0019                     i1l2177:	
   576  0019  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   577  001A  0009               	retfie
   578  001B                     __end_of_ISR:	
   579                           
   580                           	psect	text5
   581  0086                     __ptext5:	
   582 ;; *************** function _SendCtrl *****************
   583 ;; Defined at:
   584 ;;		line 137 in file "TEST_FT64F0AX_IR_Send.C"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;		None
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   593 ;; Tracked objects:
   594 ;;		On entry : 1F/2
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   600 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   601 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   602 ;;Total ram usage:        3 bytes
   603 ;; Hardware stack levels used:    1
   604 ;; This function calls:
   605 ;;		Nothing
   606 ;; This function is called by:
   607 ;;		_ISR
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           
   612                           ;psect for function _SendCtrl
   613  0086                     _SendCtrl:	
   614                           
   615                           ;TEST_FT64F0AX_IR_Send.C: 139: if(IRSendStatus==0)
   616                           
   617                           ;incstack = 0
   618                           ; Regs used in _SendCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
   619  0086  0879               	movf	_IRSendStatus,w
   620  0087  1D03               	btfss	3,2
   621  0088  288E               	goto	i1l2760
   622                           
   623                           ;TEST_FT64F0AX_IR_Send.C: 140: {
   624                           ;TEST_FT64F0AX_IR_Send.C: 141: T2UIE=0;
   625  0089  0026               	movlb	6	; select bank6
   626  008A  100D               	bcf	13,0	;volatile
   627                           
   628                           ;TEST_FT64F0AX_IR_Send.C: 142: Sendbit=0;
   629  008B  01F5               	clrf	_Sendbit
   630                           
   631                           ;TEST_FT64F0AX_IR_Send.C: 143: TxTime=0;
   632  008C  01F6               	clrf	_TxTime
   633                           
   634                           ;TEST_FT64F0AX_IR_Send.C: 144: }
   635  008D  0008               	return
   636  008E                     i1l2760:	
   637                           
   638                           ;TEST_FT64F0AX_IR_Send.C: 145: else if(IRSendStatus==1)
   639  008E  0B79               	decfsz	_IRSendStatus,w
   640  008F  28A8               	goto	i1l2780
   641  0090  3011               	movlw	17
   642                           
   643                           ;TEST_FT64F0AX_IR_Send.C: 146: {
   644                           ;TEST_FT64F0AX_IR_Send.C: 147: TxTime++;
   645  0091  0AF6               	incf	_TxTime,f
   646                           
   647                           ;TEST_FT64F0AX_IR_Send.C: 148: if(TxTime<17)
   648  0092  0276               	subwf	_TxTime,w
   649  0093  1803               	skipnc
   650  0094  2898               	goto	i1l2768
   651                           
   652                           ;TEST_FT64F0AX_IR_Send.C: 149: {
   653                           ;TEST_FT64F0AX_IR_Send.C: 150: T2UIE=1;
   654  0095  0026               	movlb	6	; select bank6
   655  0096  140D               	bsf	13,0	;volatile
   656                           
   657                           ;TEST_FT64F0AX_IR_Send.C: 151: }
   658  0097  28A2               	goto	i1l2776
   659  0098                     i1l2768:	
   660                           
   661                           ;TEST_FT64F0AX_IR_Send.C: 152: else if(TxTime<24)
   662  0098  3018               	movlw	24
   663  0099  0276               	subwf	_TxTime,w
   664  009A  1803               	skipnc
   665  009B  289F               	goto	i1l2772
   666                           
   667                           ;TEST_FT64F0AX_IR_Send.C: 153: {
   668                           ;TEST_FT64F0AX_IR_Send.C: 154: T2UIE=0;
   669  009C  0026               	movlb	6	; select bank6
   670  009D  100D               	bcf	13,0	;volatile
   671                           
   672                           ;TEST_FT64F0AX_IR_Send.C: 155: }
   673  009E  28A2               	goto	i1l2776
   674  009F                     i1l2772:	
   675  009F  3002               	movlw	2
   676                           
   677                           ;TEST_FT64F0AX_IR_Send.C: 156: else
   678                           ;TEST_FT64F0AX_IR_Send.C: 157: {
   679                           ;TEST_FT64F0AX_IR_Send.C: 158: TxTime=0;
   680  00A0  01F6               	clrf	_TxTime
   681                           
   682                           ;TEST_FT64F0AX_IR_Send.C: 159: IRSendStatus=2;
   683  00A1  00F9               	movwf	_IRSendStatus
   684  00A2                     i1l2776:	
   685                           
   686                           ;TEST_FT64F0AX_IR_Send.C: 160: }
   687                           ;TEST_FT64F0AX_IR_Send.C: 161: IRSendData=IRData[0];
   688  00A2  0020               	movlb	0	; select bank0
   689  00A3  0820               	movf	_IRData,w
   690  00A4  00F8               	movwf	_IRSendData
   691                           
   692                           ;TEST_FT64F0AX_IR_Send.C: 162: TxBit=0x01;
   693  00A5  01F7               	clrf	_TxBit
   694  00A6  0AF7               	incf	_TxBit,f
   695                           
   696                           ;TEST_FT64F0AX_IR_Send.C: 163: }
   697  00A7  0008               	return
   698  00A8                     i1l2780:	
   699                           
   700                           ;TEST_FT64F0AX_IR_Send.C: 164: else if(IRSendStatus==2)
   701  00A8  3002               	movlw	2
   702  00A9  0679               	xorwf	_IRSendStatus,w
   703  00AA  1D03               	btfss	3,2
   704  00AB  0008               	return
   705                           
   706                           ;TEST_FT64F0AX_IR_Send.C: 165: {
   707                           ;TEST_FT64F0AX_IR_Send.C: 166: if(IRSendData&TxBit)
   708  00AC  0878               	movf	_IRSendData,w
   709  00AD  0577               	andwf	_TxBit,w
   710  00AE  1903               	btfsc	3,2
   711  00AF  28B5               	goto	i1l2149
   712  00B0  3003               	movlw	3
   713                           
   714                           ;TEST_FT64F0AX_IR_Send.C: 167: {
   715                           ;TEST_FT64F0AX_IR_Send.C: 168: level1=1;
   716  00B1  01F3               	clrf	_level1
   717  00B2  0AF3               	incf	_level1,f
   718                           
   719                           ;TEST_FT64F0AX_IR_Send.C: 169: level0=3;
   720  00B3  00F4               	movwf	_level0
   721                           
   722                           ;TEST_FT64F0AX_IR_Send.C: 170: }
   723  00B4  28B9               	goto	i1l2788
   724  00B5                     i1l2149:	
   725                           
   726                           ;TEST_FT64F0AX_IR_Send.C: 171: else
   727                           ;TEST_FT64F0AX_IR_Send.C: 172: {
   728                           ;TEST_FT64F0AX_IR_Send.C: 173: level1=1;
   729  00B5  01F3               	clrf	_level1
   730  00B6  0AF3               	incf	_level1,f
   731                           
   732                           ;TEST_FT64F0AX_IR_Send.C: 174: level0=1;
   733  00B7  01F4               	clrf	_level0
   734  00B8  0AF4               	incf	_level0,f
   735  00B9                     i1l2788:	
   736                           
   737                           ;TEST_FT64F0AX_IR_Send.C: 175: }
   738                           ;TEST_FT64F0AX_IR_Send.C: 176: TxTime++;
   739  00B9  0AF6               	incf	_TxTime,f
   740                           
   741                           ;TEST_FT64F0AX_IR_Send.C: 177: if(TxTime<=level1)
   742  00BA  0876               	movf	_TxTime,w
   743  00BB  0273               	subwf	_level1,w
   744  00BC  1C03               	skipc
   745  00BD  28C1               	goto	i1l2794
   746  00BE                     i1l2792:	
   747                           
   748                           ;TEST_FT64F0AX_IR_Send.C: 178: {
   749                           ;TEST_FT64F0AX_IR_Send.C: 179: T2UIE=1;
   750  00BE  0026               	movlb	6	; select bank6
   751  00BF  140D               	bsf	13,0	;volatile
   752                           
   753                           ;TEST_FT64F0AX_IR_Send.C: 180: }
   754  00C0  0008               	return
   755  00C1                     i1l2794:	
   756                           
   757                           ;TEST_FT64F0AX_IR_Send.C: 181: else if(TxTime<=(level0+level1))
   758  00C1  0874               	movf	_level0,w
   759  00C2  0773               	addwf	_level1,w
   760  00C3  00FA               	movwf	??_SendCtrl
   761  00C4  01FB               	clrf	??_SendCtrl+1
   762  00C5  0DFB               	rlf	??_SendCtrl+1,f
   763  00C6  087B               	movf	??_SendCtrl+1,w
   764  00C7  3A80               	xorlw	128
   765  00C8  00FC               	movwf	??_SendCtrl+2
   766  00C9  3080               	movlw	128
   767  00CA  027C               	subwf	??_SendCtrl+2,w
   768  00CB  1D03               	skipz
   769  00CC  28CF               	goto	u30_25
   770  00CD  0876               	movf	_TxTime,w
   771  00CE  027A               	subwf	??_SendCtrl,w
   772  00CF                     u30_25:	
   773  00CF  1C03               	skipc
   774  00D0  28D4               	goto	i1l2798
   775  00D1                     i1l2796:	
   776                           
   777                           ;TEST_FT64F0AX_IR_Send.C: 182: {
   778                           ;TEST_FT64F0AX_IR_Send.C: 183: T2UIE=0;
   779  00D1  0026               	movlb	6	; select bank6
   780  00D2  100D               	bcf	13,0	;volatile
   781                           
   782                           ;TEST_FT64F0AX_IR_Send.C: 184: }
   783  00D3  0008               	return
   784  00D4                     i1l2798:	
   785                           
   786                           ;TEST_FT64F0AX_IR_Send.C: 185: else if(Sendbit<4)
   787  00D4  3004               	movlw	4
   788  00D5  0275               	subwf	_Sendbit,w
   789  00D6  1803               	skipnc
   790  00D7  28F2               	goto	i1l2155
   791                           
   792                           ;TEST_FT64F0AX_IR_Send.C: 186: {
   793                           ;TEST_FT64F0AX_IR_Send.C: 187: TxTime=1;
   794  00D8  01F6               	clrf	_TxTime
   795  00D9  0AF6               	incf	_TxTime,f
   796                           
   797                           ;TEST_FT64F0AX_IR_Send.C: 188: T2UIE=1;
   798  00DA  0026               	movlb	6	; select bank6
   799  00DB  140D               	bsf	13,0	;volatile
   800                           
   801                           ;TEST_FT64F0AX_IR_Send.C: 189: SaveLastBit=IRSendData&TxBit;
   802  00DC  0878               	movf	_IRSendData,w
   803  00DD  00F2               	movwf	_SaveLastBit
   804  00DE  0877               	movf	_TxBit,w
   805  00DF  05F2               	andwf	_SaveLastBit,f
   806                           
   807                           ;TEST_FT64F0AX_IR_Send.C: 190: TxBit<<=1;
   808  00E0  35F7               	lslf	_TxBit,f
   809                           
   810                           ;TEST_FT64F0AX_IR_Send.C: 191: if(TxBit==0x00)
   811  00E1  0877               	movf	_TxBit,w
   812  00E2  1D03               	btfss	3,2
   813  00E3  0008               	return
   814                           
   815                           ;TEST_FT64F0AX_IR_Send.C: 192: {
   816                           ;TEST_FT64F0AX_IR_Send.C: 193: TxBit=0x01;
   817  00E4  01F7               	clrf	_TxBit
   818  00E5  0AF7               	incf	_TxBit,f
   819                           
   820                           ;TEST_FT64F0AX_IR_Send.C: 194: Sendbit++;
   821  00E6  0AF5               	incf	_Sendbit,f
   822                           
   823                           ;TEST_FT64F0AX_IR_Send.C: 195: IRSendData=IRData[Sendbit];
   824  00E7  0875               	movf	_Sendbit,w
   825  00E8  3E20               	addlw	(low (_IRData| 0))& (0+255)
   826  00E9  0086               	movwf	6
   827  00EA  0187               	clrf	7
   828  00EB  0801               	movf	1,w
   829  00EC  00F8               	movwf	_IRSendData
   830                           
   831                           ;TEST_FT64F0AX_IR_Send.C: 196: if(Sendbit>3)
   832  00ED  3004               	movlw	4
   833  00EE  0275               	subwf	_Sendbit,w
   834  00EF  1803               	btfsc	3,0
   835                           
   836                           ;TEST_FT64F0AX_IR_Send.C: 197: {
   837                           ;TEST_FT64F0AX_IR_Send.C: 198: SendLastBit=1;
   838  00F0  147D               	bsf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   839  00F1  0008               	return
   840  00F2                     i1l2155:	
   841                           
   842                           ;TEST_FT64F0AX_IR_Send.C: 202: else
   843                           ;TEST_FT64F0AX_IR_Send.C: 203: {
   844                           ;TEST_FT64F0AX_IR_Send.C: 204: if(SendLastBit)
   845  00F2  1C7D               	btfss	_SendLastBit/(0+8),_SendLastBit& (0+7)
   846  00F3  0008               	return
   847                           
   848                           ;TEST_FT64F0AX_IR_Send.C: 205: {
   849                           ;TEST_FT64F0AX_IR_Send.C: 206: TxTime++;
   850  00F4  0AF6               	incf	_TxTime,f
   851                           
   852                           ;TEST_FT64F0AX_IR_Send.C: 207: if(SaveLastBit)
   853  00F5  0872               	movf	_SaveLastBit,w
   854  00F6  1903               	btfsc	3,2
   855  00F7  2908               	goto	i1l2838
   856                           
   857                           ;TEST_FT64F0AX_IR_Send.C: 208: {
   858                           ;TEST_FT64F0AX_IR_Send.C: 209: if(TxTime<3)
   859  00F8  3003               	movlw	3
   860  00F9  0276               	subwf	_TxTime,w
   861  00FA  1C03               	btfss	3,0
   862  00FB  28D1               	goto	i1l2796
   863                           
   864                           ;TEST_FT64F0AX_IR_Send.C: 213: else if(TxTime<4)
   865  00FC  3004               	movlw	4
   866  00FD                     L1:	
   867  00FD  0276               	subwf	_TxTime,w
   868  00FE  1C03               	btfss	3,0
   869  00FF  28BE               	goto	i1l2792
   870                           
   871                           ;TEST_FT64F0AX_IR_Send.C: 217: else
   872                           ;TEST_FT64F0AX_IR_Send.C: 218: {
   873                           ;TEST_FT64F0AX_IR_Send.C: 219: T2UIE=0;
   874  0100  0026               	movlb	6	; select bank6
   875  0101  100D               	bcf	13,0	;volatile
   876                           
   877                           ;TEST_FT64F0AX_IR_Send.C: 220: IRSendStatus=0;
   878  0102  01F9               	clrf	_IRSendStatus
   879                           
   880                           ;TEST_FT64F0AX_IR_Send.C: 221: T2UIE=0;
   881  0103  100D               	bcf	13,0	;volatile
   882                           
   883                           ;TEST_FT64F0AX_IR_Send.C: 222: SendLastBit=0;
   884  0104  107D               	bcf	_SendLastBit/(0+8),_SendLastBit& (0+7)
   885                           
   886                           ;TEST_FT64F0AX_IR_Send.C: 223: TxBit=0;
   887  0105  01F7               	clrf	_TxBit
   888                           
   889                           ;TEST_FT64F0AX_IR_Send.C: 224: TxTime=0;
   890  0106  01F6               	clrf	_TxTime
   891  0107  0008               	return
   892  0108                     i1l2838:	
   893                           
   894                           ;TEST_FT64F0AX_IR_Send.C: 227: else
   895                           ;TEST_FT64F0AX_IR_Send.C: 228: {
   896                           ;TEST_FT64F0AX_IR_Send.C: 229: if(TxTime<5)
   897  0108  3005               	movlw	5
   898  0109  0276               	subwf	_TxTime,w
   899  010A  1C03               	btfss	3,0
   900  010B  28D1               	goto	i1l2796
   901                           
   902                           ;TEST_FT64F0AX_IR_Send.C: 233: else if(TxTime<6)
   903  010C  3006               	movlw	6
   904  010D  28FD               	goto	L1
   905  010E                     __end_of_SendCtrl:	
   906  007E                     btemp	set	126	;btemp
   907  007E                     int$flags	set	126
   908  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      14
    BANK0            80      0       4
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SendCtrl

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                      _POWER_INITIAL
                     _TIMER2_INITIAL
                     _TIMER4_INITIAL
 ---------------------------------------------------------------------------------
 (1) _TIMER4_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER2_INITIAL                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POWER_INITIAL                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  0     0      0       0
                           _SendCtrl
 ---------------------------------------------------------------------------------
 (3) _SendCtrl                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _POWER_INITIAL
   _TIMER2_INITIAL
   _TIMER4_INITIAL

 _ISR (ROOT)
   _SendCtrl

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      3       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       4       5        5.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      12      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      12      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


GNU Macro Assembler for 8 bit devices.     
Symbol Table                                                                                   Wed Oct 13 09:48:52 2021

                    _GIE 005F                      _PB3 006B                      _ISR 0004  
                   ?_ISR 007A                     l2940 0039                     _WPDA 020C  
                   _WPDB 020D                     _WPDC 020E                     _WPUA 018C  
                   _WPUB 018D                     _WPUC 018E                     _main 0032  
                   fsr1h 0007                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     start 001B                    ??_ISR 007D  
                  ?_main 007A           _TIMER2_INITIAL 0069                    _T2UIE 1868  
                  _T2UIF 1870                    _T4UIE 0890                    _T4UIF 0898  
                  _PCKEN 009A                    u30_25 00CF                    _PSRC0 011A  
                  _PSRC1 011B                    _PSRC2 011C                    _PORTA 000C  
                  _PORTB 000D                    _PORTC 000E                    _TRISA 008C  
                  _TRISB 008D                    _TRISC 008E           _TIMER4_INITIAL 0079  
                  _TxBit 0077           __pbitbssCOMMON 03E8                    status 0003  
                  wtemp0 007E          __initialization 001D             __end_of_main 0045  
 __end_of_TIMER2_INITIAL 0079                   ??_main 0000         __end_of_SendCtrl 010E  
 __end_of_TIMER4_INITIAL 0086                   _CKOCON 0095                   _ANSELA 0197  
                 i1l2155 00F2                   i1l2149 00B5                   i1l2177 0019  
                 i1l2760 008E                   i1l2772 009F                   i1l2780 00A8  
                 i1l2838 0108                   i1l2862 0011                   i1l2792 00BE  
                 i1l2776 00A2                   i1l2768 0098                   i1l2794 00C1  
                 i1l2796 00D1                   i1l2788 00B9                   i1l2798 00D4  
                 _INTCON 000B                   _OSCCON 0099                   _IRData 0020  
                 _TCKSRC 031F                   _TIM4SR 0113                   _PSINK0 019A  
                 _PSINK1 019B                   _PSINK2 019C                   _TxTime 0076  
                 _level0 0074                   _level1 0073          ?_TIMER2_INITIAL 007A  
        ?_TIMER4_INITIAL 007A    __end_of_POWER_INITIAL 0069  __end_of__initialization 002F  
         __pcstackCOMMON 007A             __pidataBANK0 0000                ?_SendCtrl 007A  
             __pmaintext 0032              _SendLastBit 03E8               __pintentry 0004  
            _SaveLastBit 0072                  _TIM2CR1 030C                  _TIM4CR1 0111  
                _TIM2IER 030D                  _TIM4EGR 0114                  _TIM4ARR 0117  
                _TIM4IER 0112               ??_SendCtrl 007A                  _Sendbit 0075  
                __ptext1 0079                  __ptext2 0069                  __ptext3 0045  
                __ptext5 0086             __size_of_ISR 0017     end_of_initialization 002F  
       ??_TIMER2_INITIAL 0000         ??_TIMER4_INITIAL 0000                _SYSTime5S 0070  
    start_initialization 001D              __end_of_ISR 001B        __size_of_SendCtrl 0088  
            __pdataBANK0 0020   __size_of_POWER_INITIAL 0024              __pbssCOMMON 0070  
              ___latbits 0003            __pcstackBANK0 0000            _POWER_INITIAL 0045  
               _TIM2ARRH 0319                 _TIM2ARRL 031A                 _TIM4CNTR 0115  
               _TIM4PSCR 0116           ?_POWER_INITIAL 007A                 _SendCtrl 0086  
          __size_of_main 0013             _IRSendStatus 0079                 int$flags 007E  
__size_of_TIMER2_INITIAL 0010  __size_of_TIMER4_INITIAL 000D          ??_POWER_INITIAL 0000  
               intlevel1 0000               _IRSendData 0078  
